const entriesVersion=4;let db;self.addEventListener("unhandledrejection",event=>{const reason=event?.reason;console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})});self.onmessage=async({data})=>{try{if(!db)await IDBinit();if(data.name==="animeEntriesIsEmpty"){self.postMessage(jsonIsEmpty(await retrieveJSON("animeEntries"))||entriesVersion>(await retrieveJSON("entriesVersion")??0))}else if(data.name==="username"){const userData=await retrieveJSON("userData");self.postMessage((userData?.username??await retrieveJSON("username"))||"")}else if(data.name==="recommendedAnimeListIsEmpty"){self.postMessage(jsonIsEmpty(await retrieveJSON("recommendedAnimeList")))}else if(data.name==="aniIdsNotificationToBeUpdated"){let updatedAniIdsNotification={};let aniIdsNotificationToBeUpdated=data?.aniIdsNotificationToBeUpdated;if(aniIdsNotificationToBeUpdated instanceof Array&&aniIdsNotificationToBeUpdated.length>0){let recommendedAnimeList=await retrieveJSON("recommendedAnimeList");if(recommendedAnimeList){updatedAniIdsNotification=aniIdsNotificationToBeUpdated.reduce((result,animeId)=>{let anime=recommendedAnimeList?.[animeId];if(anime){let title=anime?.title?.english||anime?.title?.romaji||anime?.title?.native;let episodes=anime?.episodes;let animeUrl=anime?.animeUrl;let userStatus=anime?.userStatus?.toUpperCase?.();let episodeProgress=anime?.episodeProgress||0;result[anime.id]={title:typeof title==="string"?title:"",maxEpisode:typeof episodes==="number"?episodes:-1,animeUrl:typeof animeUrl==="string"?animeUrl:"",userStatus:typeof userStatus==="string"?userStatus:"UNWATCHED",episodeProgress:typeof episodeProgress==="number"?episodeProgress:0}}return result},{})}}self.postMessage(updatedAniIdsNotification)}else if(data.name){self.postMessage(await retrieveJSON(data.name))}}catch(reason){console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Failed to retrieve the data"}self.postMessage({"Failed to retrieve the data":error})}};function IDBinit(){return new Promise(resolve=>{let request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",2);request.onsuccess=event=>{db=event.target.result;resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("others");event.target.transaction.oncomplete=()=>{resolve()}};request.onerror=error=>{console.error(error)}})}function retrieveJSON(name){return new Promise(resolve=>{try{let get=db.transaction("others","readonly").objectStore("others").get(name);get.onsuccess=()=>{let result=get.result;if(result instanceof Blob){result=JSON.parse((new FileReaderSync).readAsText(result))}else if(result instanceof ArrayBuffer){result=JSON.parse((new TextDecoder).decode(result))}resolve(result)};get.onerror=ex=>{console.error(ex);resolve()}}catch(ex){console.error(ex);resolve()}})}function jsonIsEmpty(obj){for(const key in obj){return false}return true}