let request,db;self.addEventListener("unhandledrejection",event=>{const reason=event?.reason;console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})});self.onmessage=async({data})=>{if(!db){await IDBInit()}const currentDate=new Date;const currentYear=currentDate.getFullYear();const seasons={winter:new Date(parseInt(currentYear),0,1),spring:new Date(parseInt(currentYear),3,1),summer:new Date(parseInt(currentYear),6,1),fall:new Date(parseInt(currentYear),9,1)};let dateEnd,dateEndTime,seasonName;if(currentDate>=seasons.winter&&currentDate<seasons.spring){dateEndTime=seasons.spring.getTime()-1;dateEnd=new Date(dateEndTime);seasonName="Winter"}else if(currentDate>=seasons.spring&&currentDate<seasons.summer){dateEndTime=seasons.summer.getTime()-1;dateEnd=new Date(dateEndTime);seasonName="Spring"}else if(currentDate>=seasons.summer&&currentDate<seasons.fall){dateEndTime=seasons.fall.getTime()-1;dateEnd=new Date(dateEndTime);seasonName="Summer"}else{let nextYearDate=new Date(parseInt(currentYear+1),0,1);dateEndTime=nextYearDate.getTime()-1;dateEnd=new Date(dateEndTime);seasonName="Fall"}self.postMessage({message:`${msToTime(dateEnd.getTime()-(new Date).getTime(),1)} until ${seasonName} Season Ends`,key:5})};const formatNumber=(number,dec=2)=>{if(typeof number==="number"){const formatter=new Intl.NumberFormat("en-US",{maximumFractionDigits:dec,minimumFractionDigits:0,notation:"compact",compactDisplay:"short"});if(Math.abs(number)>=1e3){return formatter.format(number)}else if(Math.abs(number)<.01&&Math.abs(number)>0){return number.toExponential(0)}else{let formattedNumber=number.toFixed(dec);if(formattedNumber.indexOf(".")!==-1){formattedNumber=formattedNumber.replace(/\.?0+$/,"")}return formattedNumber||number.toLocaleString("en-US",{maximumFractionDigits:dec})}}else{return null}};function msToTime(duration,limit){try{if(duration<1e3){return"0s"}let seconds=Math.floor(duration/1e3%60),minutes=Math.floor(duration/6e4%60),hours=Math.floor(duration/36e5%24),days=Math.floor(duration/864e5%7),weeks=Math.floor(duration/6048e5%4),months=Math.floor(duration/24192e5%12),years=Math.floor(duration/290304e5%10),decades=Math.floor(duration/290304e6%10),century=Math.floor(duration/290304e7%10),millenium=Math.floor(duration/290304e8%10);let time=[];let maxUnit=millenium>0?"mil":century>0?"cen":decades>0?"dec":years>0?"y":months>0?"mon":weeks>0?"w":days>0?"d":hours>0?"h":minutes>0?"m":"s";if(limit<=1){switch(maxUnit){case"mil":{if(century>0){millenium+=century*.1;millenium=roundToNearestTenth(millenium)}break}case"cen":{if(decades>0){century+=decades*.1;century=roundToNearestTenth(century)}break}case"dec":{if(years>0){decades+=years*.1;decades=roundToNearestTenth(decades)}break}case"y":{if(months>0){years+=months*.0833333333;years=roundToNearestTenth(years)}break}case"mon":{if(weeks>0){months+=weeks*.229984378;months=roundToNearestTenth(months)}break}case"w":{if(days>0){weeks+=days*.142857143;weeks=roundToNearestTenth(weeks)}break}case"d":{if(hours>0){days+=hours*.0416666667;days=roundToNearestTenth(days)}break}case"h":{if(minutes>0){hours+=minutes*.0166666667;hours=roundToNearestTenth(hours)}break}case"m":{if(seconds>0){minutes+=seconds*.0166666667;minutes=roundToNearestTenth(minutes)}break}}}if(millenium>0)time.push(`${millenium} ${millenium>1?"millennia":"millennium"}`);if(century>0)time.push(`${century} centur${century>1?"ies":"y"}`);if(decades>0)time.push(`${decades} decade${millenium>1?"s":""}`);if(years>0)time.push(`${years} year${years>1?"s":""}`);if(months>0)time.push(`${months} month${months>1?"s":""}`);if(weeks>0)time.push(`${weeks} week${weeks>1?"s":""}`);if(days>0)time.push(`${days} day${days>1?"s":""}`);if(hours>0)time.push(`${hours} hour${hours>1?"s":""}`);if(minutes>0)time.push(`${minutes} minute${minutes>1?"s":""}`);if(seconds>0)time.push(`${seconds} second${seconds>1?"s":""}`);if(limit>0){time=time.slice(0,limit)}return time.join(" ")||"0s"}catch(e){return}}function roundToNearestTenth(number){return Math.round(number*10)/10}function IDBInit(){return new Promise((resolve,reject)=>{try{const request=indexedDB.open("Kanshi.Media.Recommendations.AniList.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onsuccess=({target})=>{db=target.result;resolve()};request.onupgradeneeded=({target})=>{try{const{result,transaction}=target;const stores=["mediaEntries","mediaEntriesInfo","excludedMediaIds","mediaUpdateAt","mediaOptions","orderedMediaOptions","tagInfo","tagInfoUpdateAt","username","userMediaEntries","userMediaUpdateAt","recommendedMediaEntries","algorithmFilters","mediaCautions","hiddenMediaEntries","categories","selectedCategory","autoPlay","gridFullView","showRateLimit","showStatus","autoUpdate","autoExport","runnedAutoUpdateAt","runnedAutoExportAt","exportPathIsAvailable","shouldManageMedia","shouldProcessRecommendedEntries","nearestMediaReleaseAiringAt","recommendationError","visited","others"];for(const store of stores){result.createObjectStore(store)}transaction.oncomplete=()=>{db=result;resolve()}}catch(ex){console.error(ex);reject(ex);transaction.abort()}};request.onerror=ex=>{console.error(ex);reject(ex)}}catch(ex){console.error(ex);reject(ex)}})}function getIDBData(key){return new Promise(resolve=>{try{const get=db.transaction(key,"readonly").objectStore(key).get(key);get.onsuccess=async()=>{let value=get.result;if(value instanceof Blob){value=await new Response(value.stream().pipeThrough(new DecompressionStream("gzip"))).json()}resolve(value)};get.onerror=ex=>{console.error(ex);resolve()}}catch(ex){console.error(ex);resolve()}})}function getIDBRecords(recordKeys){return new Promise(async resolve=>{try{const transaction=db.transaction(recordKeys,"readonly");resolve(Object.fromEntries(await Promise.all(recordKeys.map(key=>{return new Promise(resolve=>{const get=transaction.objectStore(key).get(key);get.onsuccess=async()=>{let value=get.result;if(value instanceof Blob){value=await new Response(value.stream().pipeThrough(new DecompressionStream("gzip"))).json()}resolve([key,value])};get.onerror=ex=>{console.error(ex);resolve([key])}})}))))}catch(ex){console.error(ex);resolve()}})}