let db;self.addEventListener("unhandledrejection",event=>{const reason=event?.reason;console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})});self.onmessage=async({data})=>{if(!db)await IDBinit();if(data.data!==undefined&&data.name){await saveJSON(data.data,data.name);self.postMessage({message:"success"})}};function IDBinit(){return new Promise(resolve=>{let request=indexedDB.open("Kanshi.Media.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onsuccess=event=>{db=event.target.result;resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("others");event.target.transaction.oncomplete=()=>{resolve()}};request.onerror=error=>{console.error(error)}})}function saveJSON(data,name){return new Promise((resolve,reject)=>{let blob,transaction;try{transaction=db.transaction("others","readwrite");let store=transaction.objectStore("others");let put;transaction.oncomplete=()=>{resolve()};if(data instanceof Blob){blob=data;put=store.put(blob,name)}else if(isJsonObject(data)||data instanceof Array){blob=new Blob([JSON.stringify(data)]);put=store.put(blob,name)}else{put=store.put(data,name)}put.onerror=ex=>{transaction.oncomplete=undefined;if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}};try{transaction?.commit?.()}catch{}}catch(ex){if(transaction?.oncomplete){transaction.oncomplete=undefined}if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}}})}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}