let db,windowHREF;self.addEventListener("unhandledrejection",event=>{console.error(event?.reason);self.postMessage({error:event?.reason||"Something went wrong"})});self.onmessage=async({data})=>{if(!windowHREF&&data?.windowHREF){windowHREF=data.windowHREF}if(!db)await IDBinit();let tagInfo=await retrieveJSON("tagInfo");let tagInfoUpdateAt=await retrieveJSON("tagInfoUpdateAt");if(tagInfoUpdateAt>0&&hasTagInfoData(tagInfo)){let nextSeasonUpdateAt=tagInfoUpdateAt*1e3+7884e6;if(!nextSeasonUpdateAt||nextSeasonUpdateAt<(new Date).getTime()){getTagInfoData()}else{self.postMessage({done:true})}}else{getTagInfoData()}};async function getTagInfoData(tagInfo){try{const response=await fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:`{MediaTagCollection{name category description}}`})});const result=await response?.json?.();const mediaTagCollection=result?.data?.MediaTagCollection||[];for(let i=0,l=mediaTagCollection?.length;i<l;i++){const tagCollected=mediaTagCollection?.[i];const description=tagCollected?.description;let category=tagCollected?.category;let tag=tagCollected?.name;if(!tag||!category)continue;category=cleanText(category);tag=cleanText(tag);if(!isJsonObject(tagInfo)){tagInfo={};tagInfo[category]={}}else if(!isJsonObject(tagInfo?.[category])){tagInfo[category]={}}if(description&&typeof description==="string"){tagInfo[category][tag]=description}}if(isJsonObject(tagInfo)&&!jsonIsEmpty(tagInfo)){await saveJSON(tagInfo,"tagInfo");let tagInfoUpdateAt=parseInt((new Date).getTime()/1e3);await saveJSON(tagInfoUpdateAt,"tagInfoUpdateAt")}self.postMessage({done:true})}catch{if(!await isConnected()){self.postMessage({done:true})}else{setTimeout(()=>getTagInfoData(),6e4)}}}function hasTagInfoData(tagInfo){for(let category in tagInfo){for(let tag in tagInfo[category]){return typeof tagInfo[category][tag]==="string"}return false}return false}function IDBinit(){return new Promise(resolve=>{let request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",2);request.onsuccess=event=>{db=event.target.result;resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("others");event.target.transaction.oncomplete=()=>{resolve()}};request.onerror=error=>{console.error(error)}})}function saveJSON(data,name){return new Promise((resolve,reject)=>{let blob;try{let transaction=db.transaction("others","readwrite");let store=transaction.objectStore("others");let put;if(data instanceof Blob){blob=data;put=store.put(blob,name)}else if(isJsonObject(data)||data instanceof Array){blob=new Blob([JSON.stringify(data)]);put=store.put(blob,name)}else{put=store.put(data,name)}put.onsuccess=()=>{resolve()};put.onerror=ex=>{if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}};transaction.commit()}catch(ex){if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}}})}function retrieveJSON(name){return new Promise(resolve=>{try{let get=db.transaction("others","readonly").objectStore("others").get(name);get.onsuccess=()=>{let result=get.result;if(result instanceof Blob){result=JSON.parse((new FileReaderSync).readAsText(result))}else if(result instanceof ArrayBuffer){result=JSON.parse((new TextDecoder).decode(result))}resolve(result)};get.onerror=ex=>{console.error(ex);resolve()}}catch(ex){console.error(ex);resolve()}})}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}function jsonIsEmpty(obj){for(const key in obj)return false;return true}function cleanText(k){k=k!=="_"?k?.replace?.(/\_/g," "):k;k=k!=='\\"'?k?.replace?.(/\\"/g,'"'):k;k=k?.replace?.(/\b(tv|ona|ova)\b/gi,match=>match?.toUpperCase?.());return k?.toLowerCase?.()||""}let isConnectedPromise;async function isConnected(){if(isConnectedPromise)return isConnectedPromise;isConnectedPromise=new Promise(async resolve=>{try{if(navigator?.onLine!==false){if(typeof windowHREF!=="string"||windowHREF===""){return resolve(true)}let response=await fetch(windowHREF,{method:"HEAD",cache:"no-store"});isConnectedPromise=null;resolve(response?.ok)}isConnectedPromise=null;resolve(false)}catch(error){isConnectedPromise=null;resolve(false)}});return isConnectedPromise}