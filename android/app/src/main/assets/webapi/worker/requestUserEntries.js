let db,windowHREF,isShowingProgress,isShowingProgressTimeout;self.addEventListener("unhandledrejection",event=>{const reason=event?.reason;console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})});self.onmessage=async({data})=>{if(!windowHREF&&data?.windowHREF){windowHREF=data.windowHREF}if(!db)await IDBinit();let username=data?.username;let visibilityChange=data?.visibilityChange??false;let userAnimeUpdateAt=await retrieveJSON("userAnimeUpdateAt");let userData=await retrieveJSON("userData");let savedUsername=userData?.username??await retrieveJSON("username");let userEntriesLen=((userData?.userEntries??await retrieveJSON("userEntries"))||[]).length;if(typeof savedUsername==="string"&&userEntriesLen<1){username=savedUsername;getUserEntries()}else if(typeof savedUsername==="string"&&userEntriesLen>0&&(username===savedUsername||!username)){username=savedUsername;recallUE()}else if(typeof username==="string"&&username!==savedUsername){getUserEntries()}else{self.postMessage({message:"No Anilist Username Found"})}function recallUE(){if(typeof userAnimeUpdateAt==="number"&&!isNaN(userAnimeUpdateAt)){if(!visibilityChange){self.postMessage({status:"Checking Latest User Entries"})}fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{User(name:"${username}"){updatedAt}}`})}).then(async response=>{return await response.json()}).then(result=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){error=error||"Failed to check entries";self.postMessage({status:error});self.postMessage({error:error})}else{let currentUserAnimeUpdateAt=result?.data?.User?.updatedAt;if(typeof currentUserAnimeUpdateAt==="number"&&!isNaN(currentUserAnimeUpdateAt)){if(currentUserAnimeUpdateAt!==userAnimeUpdateAt){self.postMessage({status:"Found latest User Entries"});getUserEntries()}else{self.postMessage({status:null});self.postMessage({message:"User Entries is Up to Date"})}}}}).catch(async error=>{if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;let errorText=error.message;if(errorText==="User not found"||errorText==="Private User"){self.postMessage({status:errorText});self.postMessage({error:errorText})}else{if(headers?.get("x-ratelimit-remaining")>0){return recallUE()}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUE()},6e4)}}console.error(error)})}else{getUserEntries()}}function getUserEntries(){let userEntries=[];let maxAnimePerChunk=500;let currentUserAnimeUpdate;self.postMessage({status:"Getting User Entries"});function recallAV(chunk){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{MediaListCollection(userName:"${username}",${chunk>1?"chunk:"+chunk+",perChunk:"+maxAnimePerChunk+",":""}forceSingleCompletedList:true,type:ANIME){hasNextChunk lists{entries{status media{id}score progress}}user{updatedAt}}m:MediaListCollection(userName:"${username}",${chunk>1?"chunk:"+chunk+",perChunk:"+maxAnimePerChunk+",":""}forceSingleCompletedList:true,type:MANGA){hasNextChunk lists{entries{status media{id}score progress progressVolumes}}user{updatedAt}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){error=error||"Failed to retrieve entries.";self.postMessage({status:error});self.postMessage({error:error})}else{let animeCollection=result?.data?.MediaListCollection;let mangaCollection=result?.data?.m;if(typeof currentUserAnimeUpdate!=="number"||isNaN(currentUserAnimeUpdate)){currentUserAnimeUpdate=animeCollection?.user?.updatedAt||mangaCollection?.user?.updatedAt}let userList=[];if(animeCollection?.lists){userList=animeCollection?.lists??[]}if(mangaCollection?.lists){userList=userList.concat(mangaCollection?.lists??[])}for(let i=0;i<userList.length;i++){userEntries=userEntries.concat(userList[i]?.entries??[])}let hasNextChunk=animeCollection?.hasNextChunk||mangaCollection?.hasNextChunk;if(hasNextChunk&&(userList?.length??0)>0){if(!isShowingProgress){isShowingProgress=true;isShowingProgressTimeout=setTimeout(()=>{self.postMessage({status:`${userEntries.length} User ${userEntries.length>1?"Entries":"Entry"} has been added`});isShowingProgress=false},17)}if(headers?.get("x-ratelimit-remaining")>0){return recallAV(++chunk)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallAV(++chunk)},6e4)}}else{(async()=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;self.postMessage({status:`${userEntries.length} User ${userEntries.length>1?"Entries":"Entry"} has been added`});isShowingProgress=false;await saveJSON(true,"shouldProcessRecommendation");const animeEntries=await retrieveJSON("animeEntries");await saveJSON({username:username,userEntries:userEntries.reduce((result,entry)=>{let userAnimeID=entry?.media?.id;let userEntry={};if(userAnimeID&&animeEntries[userAnimeID]){userEntry.media=animeEntries[userAnimeID];userEntry.status=entry?.status;userEntry.score=entry?.score;userEntry.progress=entry?.progress;userEntry.progressVolumes=entry?.progressVolumes;result.push(userEntry)}return result},[])},"userData");if(typeof currentUserAnimeUpdate==="number"&&!isNaN(currentUserAnimeUpdate)){await saveJSON(currentUserAnimeUpdate,"userAnimeUpdateAt")}self.postMessage({status:null});self.postMessage({updateRecommendationList:true});self.postMessage({newusername:username})})()}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable",showToUser:true});return}let headers=error.headers;let errorText=error.message;if(errorText==="User not found"||errorText==="Private User"){self.postMessage({status:errorText});self.postMessage({error:errorText})}else{if(headers?.get("x-ratelimit-remaining")>0){return recallAV(chunk)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallAV(chunk)},6e4)}}console.error(error)})}recallAV(1)}};function IDBinit(){return new Promise(resolve=>{let request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",2);request.onsuccess=event=>{db=event.target.result;resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("others");event.target.transaction.oncomplete=()=>{resolve()}};request.onerror=error=>{console.error(error)}})}function saveJSON(data,name){return new Promise((resolve,reject)=>{let blob;try{let transaction=db.transaction("others","readwrite");let store=transaction.objectStore("others");let put;if(data instanceof Blob){blob=data;put=store.put(blob,name)}else if(isJsonObject(data)||data instanceof Array){blob=new Blob([JSON.stringify(data)]);put=store.put(blob,name)}else{put=store.put(data,name)}put.onsuccess=()=>{resolve()};put.onerror=ex=>{if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}};try{transaction?.commit?.()}catch{}}catch(ex){if(blob instanceof Blob){(async()=>{try{await saveJSON((new FileReaderSync).readAsArrayBuffer(blob),name);resolve()}catch(ex2){console.error(ex);console.error(ex2);reject(ex)}})()}else{console.error(ex);reject(ex)}}})}function retrieveJSON(name){return new Promise(resolve=>{try{let get=db.transaction("others","readonly").objectStore("others").get(name);get.onsuccess=()=>{let result=get.result;if(result instanceof Blob){result=JSON.parse((new FileReaderSync).readAsText(result))}else if(result instanceof ArrayBuffer){result=JSON.parse((new TextDecoder).decode(result))}resolve(result)};get.onerror=ex=>{console.error(ex);resolve()}}catch(ex){console.error(ex);resolve()}})}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}function msToTime(duration,limit){try{if(duration<1e3){return"0s"}let seconds=Math.floor(duration/1e3%60),minutes=Math.floor(duration/6e4%60),hours=Math.floor(duration/36e5%24),days=Math.floor(duration/864e5%7),weeks=Math.floor(duration/6048e5%4),months=Math.floor(duration/24192e5%12),years=Math.floor(duration/290304e5%10),decades=Math.floor(duration/290304e6%10),century=Math.floor(duration/290304e7%10),millenium=Math.floor(duration/290304e8%10);let time=[];if(millenium>0)time.push(`${millenium}mil`);if(century>0)time.push(`${century}cen`);if(decades>0)time.push(`${decades}dec`);if(years>0)time.push(`${years}y`);if(months>0)time.push(`${months}mon`);if(weeks>0)time.push(`${weeks}w`);if(days>0)time.push(`${days}d`);if(hours>0)time.push(`${hours}h`);if(minutes>0)time.push(`${minutes}m`);if(seconds>0)time.push(`${seconds}s`);if(limit>0){time=time.slice(0,limit)}return time.join(" ")||"0s"}catch(e){return""}}let isConnectedPromise;async function isConnected(){if(isConnectedPromise)return isConnectedPromise;isConnectedPromise=new Promise(async resolve=>{try{if(navigator?.onLine!==false){if(typeof windowHREF!=="string"||windowHREF===""){return resolve(true)}let response=await fetch(windowHREF,{method:"HEAD",cache:"no-store"});isConnectedPromise=null;resolve(response?.ok)}isConnectedPromise=null;resolve(false)}catch(error){isConnectedPromise=null;resolve(false)}});return isConnectedPromise}