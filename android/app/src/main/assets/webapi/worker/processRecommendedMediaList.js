let db;const mediaRelationTypes=["source","adaptation","prequel","sequel","parent","side_story","summary","compilation","alternative","spin_off"];const minNumber=1-6e-17!==1?6e-17:Number.EPSILON;self.addEventListener("unhandledrejection",event=>{const reason=event?.reason;console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})});self.onmessage=async({data})=>{try{if(!db)await IDBinit();self.postMessage({status:"Processing Recommendation List"});const mediaEntries=await retrieveJSON("mediaEntries")||{};const userData=await retrieveJSON("userData");const userEntries=(userData?.userEntries??await retrieveJSON("userEntries"))||[];let includedUserEntryCount=0;let contentFocused=false,includeUnknownVar=false,includeYear=true,includeAverageScore=false,minPopularity,minAverageScore,minSampleSize,sampleSize,tagRankLimit=minNumber,customUserScoreBase;let include={genres:{},tags:{},categories:{}},exclude={genres:{},tags:{},categories:{}};let algorithmFilters=data?.algorithmFilters;const hasNewAlgorithmFilter=algorithmFilters!=null;if(!hasNewAlgorithmFilter){algorithmFilters=await retrieveJSON("algorithmFilters")||[{filterType:"bool",optionName:"content focused",status:"included"}]}algorithmFilters.forEach(({status,filterType,optionName,optionCategory,optionValue})=>{if(status==="included"){if(filterType==="selection"){if(optionCategory==="genre"){include.genres["genre: "+optionName]=true}else if(optionCategory==="tag"){include.tags["tag: "+optionName]=true}else if(optionCategory==="tag category"){include.categories["tag category: "+optionName]=true}}else if(filterType==="bool"){if(optionName==="content focused"){contentFocused=true}else if(optionName==="inc. all factors"){includeUnknownVar=true}else if(optionName==="inc. average score"){includeAverageScore=true}else if(optionName==="exclude year"){includeYear=false}}else if(filterType==="number"){if(optionName==="min tag percentage"){let newTagRankLimit=parseFloat(optionValue);if(newTagRankLimit>0){tagRankLimit=newTagRankLimit}}else if(optionName==="scoring system"){customUserScoreBase=parseFloat(optionValue)}else if(optionName==="sample size"){sampleSize=parseFloat(optionValue)}else if(optionName==="min sample size"){minSampleSize=parseFloat(optionValue)}else if(optionName==="min popularity"){minPopularity=parseFloat(optionValue)}else if(optionName==="min average score"){minAverageScore=parseFloat(optionValue)}}}else if(status==="excluded"){if(filterType==="selection"){if(optionCategory==="genre"){exclude.genres["genre: "+optionName]=true}else if(optionCategory==="tag"){exclude.tags["tag: "+optionName]=true}else if(optionCategory==="tag category"){exclude.categories["tag category: "+optionName]=true}}}});self.postMessage({status:"Processing Recommendation List"});if(userEntries.length>=2){if(isJsonObject(userEntries[0])&&isJsonObject(userEntries[1])){userEntries.sort((a,b)=>{let x=a?.score!=null?a.score:-Infinity,y=b?.score!=null?b.score:-Infinity;if(x!==y)return y-x;x=a?.media?.popularity!=null?a.media.popularity:-Infinity;y=b?.media?.popularity!=null?b.media.popularity:-Infinity;return y-x})}}const minScoreValue=.01;let userScores,userScoreBase=100;let newHighestRange=userScoreBase,minUserScore=1,newLowestRange=minUserScore;let varScheme={genres:{},tags:{},studios:{},originalGenres:{},originalTags:{}};let userEntriesStatus={};let averageScore=[];let year=[];let genresMeanCount={};let tagsMeanCount={};let studiosModeCount={};let genresWithUpperCount={},genresWithUpperScore={},tagsWithUpperScore={},studiosWithUpperScore={};let minOthersScore={genres:minScoreValue,tags:minScoreValue},maxOthersScore={genres:minScoreValue,tags:minScoreValue};let includedMediaRelations={};self.postMessage({status:"Processing Recommendation List"});for(let i=0,l=userEntries.length;i<l;i++){loadProgress((i+1)/l*100*.3);let media=userEntries[i].media;let mediaID=media?.id;let status=userEntries[i].status;let userScore=userEntries[i].score;let episodeProgress=userEntries[i].progress;let volumeProgress=userEntries[i].progressVolumes;if(mediaID){if(!isJsonObject(userEntriesStatus[mediaID])){userEntriesStatus[mediaID]={}}if(status&&typeof status==="string"){userEntriesStatus[mediaID].userStatus=status}if(userScore>0){userEntriesStatus[mediaID].userScore=userScore}if(episodeProgress>0){userEntriesStatus[mediaID].episodeProgress=episodeProgress}if(volumeProgress>0){userEntriesStatus[mediaID].volumeProgress=volumeProgress}}let genres=media?.genres||[];let tags=media?.tags||[];let studios=media?.studios?.edges?.filter?.(e=>e?.isMain)||[];if(userScore>0){if(includedMediaRelations[mediaID])continue;includedMediaRelations[mediaID]=true;let mediaRelations=media?.relations?.edges||[];if(mediaRelations instanceof Array){if(mediaRelations.length>0){mediaRelations.forEach(e=>{let mediaRelationType=e?.relationType;let relationID=e?.node?.id;if(typeof mediaRelationType==="string"&&typeof relationID==="number"){if(mediaRelationTypes.includes(mediaRelationType.trim().toLowerCase())){includedMediaRelations[relationID]=true}}})}}++includedUserEntryCount;for(let j=0,jl=genres.length;j<jl;j++){let genre=genres[j];if(typeof genre==="string"){let fullGenre="genre: "+genre;if((jsonIsEmpty(include.genres)||include.genres[fullGenre]||include.genres["genre: all"])&&!exclude.genres[fullGenre]&&!exclude.genres["genre: all"]){if(varScheme.genres[fullGenre]){varScheme.genres[fullGenre].userScore.push(userScore);++varScheme.genres[fullGenre].count}else{varScheme.genres[fullGenre]={userScore:[userScore],count:1}}if(genresMeanCount[fullGenre]){++genresMeanCount[fullGenre]}else{genresMeanCount[fullGenre]=1}}}}for(let j=0,jl=tags.length;j<jl;j++){let tagRank=tags[j]?.rank;if(!tagRank||tagRank<tagRankLimit)continue;let tag=tags[j]?.name;let tagCategory=tags[j]?.category;if(typeof tag==="string"&&typeof tagCategory==="string"){let fullTag="tag: "+tag;let fullTagCategory="tag category: "+tagCategory;if((jsonIsEmpty(include.categories)||include.categories[fullTagCategory]||include.categories["tag category: all"])&&!exclude.categories[fullTagCategory]&&!exclude.categories["tag category: all"]&&(jsonIsEmpty(include.tags)||include.tags[fullTag]||include.tags["tag: all"])&&!exclude.tags[fullTag]&&!exclude.tags["tag: all"]){let tagWeight=tagRank*.01;if(varScheme.tags[fullTag]){varScheme.tags[fullTag].userScore.push(userScore*tagWeight);varScheme.tags[fullTag].count=varScheme.tags[fullTag].count+tagWeight}else{varScheme.tags[fullTag]={userScore:[userScore*tagWeight],count:tagWeight}}if(tagsMeanCount[fullTag]){tagsMeanCount[fullTag]=tagsMeanCount[fullTag]+tagWeight}else{tagsMeanCount[fullTag]=tagWeight}}}}let includedStudios={};for(let j=0,jl=studios.length;j<jl;j++){let studio=studios[j]?.node?.name;if(typeof studio==="string"){if(includedStudios[studio])continue;includedStudios[studio]=true;let fullStudio="studio: "+studio;if(varScheme.studios[fullStudio]){varScheme.studios[fullStudio].userScore.push(userScore);++varScheme.studios[fullStudio].count}else{varScheme.studios[fullStudio]={userScore:[userScore],count:1}}if(studiosModeCount[fullStudio]){++studiosModeCount[fullStudio]}else{studiosModeCount[fullStudio]=1}}}if(isAN(media?.averageScore)&&includeAverageScore){averageScore.push({userScore:userScore,averageScore:media.averageScore})}let mediaYear=media?.seasonYear||media?.startDate?.year||media?.endDate?.year;if(isAN(parseFloat(mediaYear))&&includeYear){year.push({userScore:userScore,year:parseFloat(mediaYear)})}}}if(includedUserEntryCount<1){varScheme={}}else{let maxUserScore=-Infinity;userScores=Object.values(userEntriesStatus).map(entry=>entry.userScore).filter(uscore=>{let include=uscore>0;if(include){if(uscore>maxUserScore){maxUserScore=uscore}if(uscore<minUserScore){minUserScore=uscore}}return include});newHighestRange=userScoreBase=maxUserScore<=3?3:maxUserScore<=5?5:maxUserScore<=10?10:100;if(minUserScore<minScoreValue){for(let key in minOthersScore){minOthersScore[key]=minUserScore}}newLowestRange=minUserScore;let genresUpperCount;if(typeof sampleSize==="number"&&sampleSize>=1){genresMeanCount=sampleSize}else{let genresMeanAndSTD=arrayMeanAndSTD(Object.values(genresMeanCount));genresMeanCount=genresMeanAndSTD.mean;genresUpperCount=genresMeanAndSTD.mean+genresMeanAndSTD.standardDeviation}if(minSampleSize>=0){genresMeanCount=Math.max(minSampleSize,genresMeanCount)}if(typeof sampleSize==="number"&&sampleSize>=1){tagsMeanCount=sampleSize}else{tagsMeanCount=arrayMean(Object.values(tagsMeanCount))}if(minSampleSize>=0){tagsMeanCount=Math.max(minSampleSize,tagsMeanCount)}if(typeof sampleSize==="number"&&sampleSize>=1){studiosModeCount=sampleSize}else if(!jsonIsEmpty(studiosModeCount)){studiosModeCount=arrayMode(Object.values(studiosModeCount))}else{studiosModeCount=Math.min(2,includedUserEntryCount)}if(minSampleSize>=0){studiosModeCount=Math.max(minSampleSize,studiosModeCount)}varScheme.includeUnknownVar=!contentFocused&&includeUnknownVar;varScheme.minPopularity=minPopularity;varScheme.minAverageScore=minAverageScore;let genresKey=Object.keys(varScheme.genres);let genresMeanAndSTD=arrayMeanAndSTD(genresKey.map(genre=>arrayMean(varScheme.genres[genre].userScore)));const genresMean=genresMeanAndSTD.mean;const genresUpperScore=genresMeanAndSTD.mean+genresMeanAndSTD.standardDeviation;for(let i=0,l=genresKey.length;i<l;i++){const genre=genresKey[i];const originalScore=arrayMean(varScheme.genres[genre].userScore);const count=varScheme.genres[genre].count;let score=originalScore;if(count>=genresUpperCount){genresWithUpperCount[genre]=true;varScheme.originalGenres[genre]=originalScore}if(contentFocused||originalScore<genresMean||count<genresMeanCount){if(contentFocused||count<genresMeanCount){let Cweight=count/genresMeanCount;score=score*Cweight}if(contentFocused||originalScore<genresMean){let Sweight=originalScore/genresMean;score=score*Sweight}if(score<minOthersScore.genres){minOthersScore.genres=score}}if(contentFocused){if(originalScore>=genresUpperScore&&count>=genresMeanCount){genresWithUpperScore[genre]=true}if(originalScore>maxOthersScore.genres){maxOthersScore.genres=originalScore}varScheme.originalGenres[genre]=originalScore}else{if(score>=genresUpperScore&&count>=genresMeanCount){genresWithUpperScore[genre]=true}if(score>maxOthersScore.genres){maxOthersScore.genres=score}}varScheme.genres[genre]=score}let tagsKey=Object.keys(varScheme.tags);let tagsMeanAndSTD=arrayMeanAndSTD(tagsKey.map(tag=>arrayMean(varScheme.tags[tag].userScore)));const tagsMean=tagsMeanAndSTD.mean;const tagsUpperScore=tagsMeanAndSTD.mean+tagsMeanAndSTD.standardDeviation;for(let i=0;i<tagsKey.length;i++){const tag=tagsKey[i];const originalScore=arrayMean(varScheme.tags[tag].userScore);const count=varScheme.tags[tag].count;let score=originalScore;if(contentFocused||originalScore<tagsMean||count<tagsMeanCount){if(contentFocused||count<tagsMeanCount){let Cweight=count/tagsMeanCount;score=score*Cweight}if(contentFocused||originalScore<tagsMean){let Sweight=originalScore/tagsMean;score=score*Sweight}if(score<minOthersScore.tags){minOthersScore.tags=score}}if(contentFocused){if(originalScore>=tagsUpperScore&&count>=tagsMeanCount){tagsWithUpperScore[tag]=true}if(originalScore>maxOthersScore.tags){maxOthersScore.tags=originalScore}varScheme.originalTags[tag]=originalScore}else{if(score>=tagsUpperScore&&count>=tagsMeanCount){tagsWithUpperScore[tag]=true}if(score>maxOthersScore.tags){maxOthersScore.tags=score}}varScheme.tags[tag]=score}let studiosKey=Object.keys(varScheme.studios);let studiosMeanAndSTD=arrayMeanAndSTD(studiosKey.map(studio=>arrayMean(varScheme.studios[studio].userScore)));const studiosUpperScore=studiosMeanAndSTD.mean+studiosMeanAndSTD.standardDeviation;for(let i=0,l=studiosKey.length;i<l;i++){const studio=studiosKey[i];const originalScore=arrayMean(varScheme.studios[studio].userScore);const count=varScheme.studios[studio].count;if(originalScore>=studiosUpperScore&&count>studiosModeCount){studiosWithUpperScore[studio]=true}varScheme.studios[studio]=originalScore}varScheme.genresMean=genresMean;varScheme.tagsMean=tagsMean;varScheme.includeCategories=include.categories;varScheme.excludeCategories=exclude.categories;varScheme.includeGenres=include.genres;varScheme.excludeGenres=exclude.genres;varScheme.includeTags=include.tags;varScheme.excludeTags=exclude.tags;if(includeYear){let yearXY=[];for(let i=0,l=year.length;i<l;i++){yearXY.push([year[i].year,year[i].userScore])}if(yearXY.length>=(minSampleSize||33)){varScheme.yearModel=linearRegression(yearXY)}}if(includeAverageScore){let averageScoreXY=[];for(let i=0,l=averageScore.length;i<l;i++){averageScoreXY.push([averageScore[i].averageScore,averageScore[i].userScore])}if(averageScoreXY.length>=(minSampleSize||33)){varScheme.averageScoreModel=linearRegression(averageScoreXY)}}}self.postMessage({status:"Processing Recommendation List"});let recommendedMediaListArray=[];let usedScoreBasis,maxScore=-Infinity,minScore=Infinity,maxWeightedScore=-Infinity,minWeightedScore=Infinity;let meanUserScore,meanScoreAll,meanScoreAbove;let mediaEntriesArray=Object.values(mediaEntries??{});let averageScoresArray=[],maxAverageScore=-Infinity,popularityArray=[];for(let i=0,l=mediaEntriesArray.length;i<l;i++){let media=mediaEntriesArray[i];let averageScore=media.averageScore;if(averageScore>0){if(averageScore>maxAverageScore){maxAverageScore=averageScore}averageScoresArray.push(averageScore)}let popularity=media.popularity;if(popularity>=1){popularityArray.push(popularity)}}let popularityMode=varScheme?.minPopularity?varScheme.minPopularity:arrayMode(popularityArray);let averageScoreMode=varScheme?.minAverageScore?varScheme.minAverageScore:arrayMode(averageScoresArray);let dayInMillis=1e3*60*60*24;self.postMessage({popularityMode:popularityMode,averageScoreMode:averageScoreMode});let filters=await retrieveJSON("filters");if(!jsonIsEmpty(varScheme)&&userScores?.length>0){meanUserScore=arrayMean(userScores);let{standardDeviation,mean}=arrayMeanAndSTD(customUserScoreBase===0?userScores.filter(score=>score>1):userScores);if(customUserScoreBase>0&&customUserScoreBase!==userScoreBase){standardDeviation=mapValueDirect(standardDeviation,userScoreBase,customUserScoreBase);mean=mapValueDirect(mean,userScoreBase,customUserScoreBase);usedScoreBasis=customUserScoreBase}else{usedScoreBasis=userScoreBase}newHighestRange=Math.min(mean+standardDeviation,usedScoreBasis);newLowestRange=Math.max(Math.min(standardDeviation,mean-standardDeviation),minUserScore);for(let i=0,l=mediaEntriesArray.length;i<l;i++){loadProgress(i/l*100*.7+30);let media=mediaEntriesArray[i];let mediaID=media?.id;let mediaUrl=media?.siteUrl;let format=capitalizeWords(media?.format);let countryOfOrigin=media?.countryOfOrigin;let year=media?.seasonYear||media?.startDate?.year||media?.endDate?.year;let season=capitalizeWords(media?.season);let genres=media?.genres||[];let tags=media?.tags||[];let studios=media?.studios?.edges?.filter?.(e=>e?.isMain)||[];let status=capitalizeWords(media?.status);let popularity=media?.popularity;let userStatus="Unseen";if(typeof userEntriesStatus?.[mediaID]?.userStatus==="string"){userStatus=capitalizeWords(userEntriesStatus?.[mediaID]?.userStatus);if(userStatus&&filters?.["user status"]&&filters["user status"]?.[userStatus]===undefined){filters["user status"][userStatus]=true}}if(typeof status==="string"&&status){if(filters?.["release status"]&&filters["release status"]?.[status]===undefined){filters["release status"][status]=true}}if(typeof format==="string"&&format){if(filters?.format&&filters.format?.[format]===undefined){filters.format[format]=true}}if(typeof countryOfOrigin==="string"&&countryOfOrigin){if(filters?.["country of origin"]&&filters["country of origin"]?.[countryOfOrigin]===undefined){filters["country of origin"][countryOfOrigin]=true}}if(isAN(year)){let yearStr=year?.toString?.();if(typeof yearStr==="string"&&yearStr&&filters?.year&&filters.year?.[yearStr]===undefined){filters.year[yearStr]=true}}let favouriteGenresIncluded={},favouriteTagsIncluded={},favouriteStudiosIncluded={},genresIncluded={},tagsIncluded={},studiosIncluded={};let zgenres=[];for(let j=0,jl=genres.length;j<jl;j++){let genre=genres[j];if(typeof genre!=="string")continue;let fullGenre="genre: "+genre;if((jsonIsEmpty(varScheme.includeGenres)||varScheme.includeGenres[fullGenre]||varScheme.includeGenres["genre: all"])&&!varScheme.excludeGenres[fullGenre]&&!varScheme.excludeGenres["genre: all"]){const genreScore=varScheme.genres[fullGenre];if(!favouriteGenresIncluded[genre]&&!genresIncluded[genre]){let genreShownScore;if(contentFocused){genreShownScore=varScheme.originalGenres[fullGenre]}else{genreShownScore=genreScore}if(typeof genreShownScore==="number"){if(genresWithUpperCount?.[fullGenre]||genresWithUpperScore?.[fullGenre]){favouriteGenresIncluded[genre]=genreShownScore}else{genresIncluded[genre]=genreShownScore}}}if(typeof genreScore==="number"){zgenres.push({genre:fullGenre,score:genreScore})}else if(typeof varScheme.genresMean==="number"&&varScheme.includeUnknownVar){zgenres.push({genre:fullGenre,score:varScheme.genresMean})}}if(genre&&filters?.genre&&filters?.genre?.[genre]===undefined){filters.genre[genre]=true}}let ztags=[];for(let j=0,jl=tags.length;j<jl;j++){let tag=tags[j]?.name;if(typeof tag!=="string")continue;let tagCategory=tags[j]?.category;if(typeof tagCategory!=="string")continue;const tagRank=tags[j]?.rank;let fullTag="tag: "+tag;let fullTagCategory="tag category: "+tagCategory;if((jsonIsEmpty(varScheme.includeCategories)||varScheme.includeCategories[fullTagCategory]||varScheme.includeCategories["tag category: all"])&&!varScheme.excludeCategories[fullTagCategory]&&!varScheme.excludeCategories["tag category: all"]&&(jsonIsEmpty(varScheme.includeTags)||varScheme.includeTags[fullTag]||varScheme.includeTags["tag: all"])&&!varScheme.excludeTags[fullTag]&&!varScheme.excludeTags["tag: all"]){const tagScore=varScheme.tags[fullTag];if(!favouriteTagsIncluded[tag]&&!tagsIncluded[tag]){let tagShownScore;if(contentFocused){tagShownScore=varScheme.originalTags[fullTag]}else{tagShownScore=tagScore}if(typeof tagShownScore==="number"){if(tagsWithUpperScore?.[fullTag]){favouriteTagsIncluded[tag]=tagShownScore}else{tagsIncluded[tag]=tagShownScore}}}if(typeof tagScore==="number"&&typeof tagRank==="number"&&tagRank>=tagRankLimit){const tagWeight=tagRank*.01;ztags.push(varScheme.tags[fullTag]*tagWeight)}else if(typeof varScheme.tagsMean==="number"&&varScheme.includeUnknownVar){ztags.push(varScheme.tagsMean)}}if(tag&&filters?.tag&&filters?.tag?.[tag]===undefined){filters.tag[tag]=true}if(tagCategory&&filters?.["tag category"]&&filters?.["tag category"]?.[tagCategory]===undefined){filters["tag category"][tagCategory]=true}}let includedStudios={};for(let j=0,jl=studios.length;j<jl;j++){let studio=studios[j]?.node?.name;if(typeof studio!=="string")continue;if(includedStudios[studio])continue;includedStudios[studio]=true;let fullStudio="studio: "+studio;const studioShownScore=varScheme.studios[fullStudio];if(!favouriteStudiosIncluded[studio]&&!studiosIncluded[studio]){if(typeof studioShownScore==="number"){if(studiosWithUpperScore?.[fullStudio]){favouriteStudiosIncluded[studio]=studioShownScore}else{studiosIncluded[studio]=studioShownScore}}}if(studio&&filters?.studio&&filters?.studio?.[studio]===undefined){filters.studio[studio]=true}}let mediaQuality=[];let yearModel=varScheme.yearModel??{};if(isAN(year)&&!jsonIsEmpty(yearModel)&&includeYear&&yearModel?.slope>0){let seasonYear=year;if(typeof seasonYear==="string"){seasonYear=parseFloat(seasonYear)}let modelScore=LRpredict(yearModel,seasonYear);if(modelScore>=minScoreValue){mediaQuality.push(modelScore)}else{mediaQuality.push(minScoreValue)}}else{mediaQuality.push(minScoreValue)}let averageScore=media?.averageScore;let averageScoreModel=varScheme.averageScoreModel??{};if(isAN(averageScore)&&!jsonIsEmpty(averageScoreModel)&&includeAverageScore&&averageScoreModel?.slope>0){if(typeof averageScore==="string"){averageScore=parseFloat(averageScore)}let modelScore=LRpredict(averageScoreModel,averageScore);if(modelScore>=minScoreValue){mediaQuality.push(modelScore)}else{mediaQuality.push(minScoreValue)}}else{mediaQuality.push(minScoreValue)}let episodes=media?.episodes;let duration=media?.duration;let mediaContent=[];if(zgenres.length){let genreValues=zgenres.reduce((acc,_genre)=>{acc.push(_genre.score);return acc},[]);if(zgenres.some(e=>!genresWithUpperCount[e.genre])){mediaContent.push(arrayMean(genreValues))}else{mediaContent.push(getMax(genreValues))}}else{mediaContent.push(minScoreValue)}if(ztags.length){mediaContent.push(arrayMean(ztags))}else{mediaContent.push(minScoreValue)}let finalMediaQuality=mediaQuality.length?arrayMean(mediaQuality):minScoreValue;let finalMediaContent=mediaContent.length?arrayMean(mediaContent):minScoreValue;let score=finalMediaContent*finalMediaQuality;genres=genres.length?genres:[];tags=tags.length?tags.map(e=>{return{name:e?.name,rank:e?.rank}}):[];studios=studios.reduce((result,e)=>{result[e?.node?.name]=e?.node?.siteUrl;return result},{});let weightedScore;if(averageScore>0){if(score>0&&averageScore<averageScoreMode){let ASweight=averageScore/averageScoreMode;weightedScore=score*ASweight}else{weightedScore=score}}let newScore=weightedScore!==score?weightedScore:score;if(popularity>0&&popularityMode>0){if(newScore>0&&popularity<popularityMode){let PSweight=popularity/popularityMode;weightedScore=score*PSweight}else{weightedScore=newScore}}if(!weightedScore||weightedScore<=0||!isFinite(weightedScore)){weightedScore=minScoreValue}if(!score||score<=0||!isFinite(score)){score=minScoreValue}if(score>maxScore){maxScore=score}if(score<minScore){minScore=score}if(weightedScore>maxWeightedScore){maxWeightedScore=weightedScore}if(weightedScore<minWeightedScore){minWeightedScore=weightedScore}if(typeof media?.nextAiringEpisode?.episode==="number"&&!isNaN(media.nextAiringEpisode.episode)&&typeof media.nextAiringEpisode.airingAt==="number"&&!isNaN(media.nextAiringEpisode.airingAt)){let airingAt=media.nextAiringEpisode.airingAt;let airingAtDate=new Date(airingAt*1e3);let currentDate=new Date;if(airingAtDate<=currentDate){if(media.nextAiringEpisode.episode===episodes){media.nextAiringEpisode=null;status="Finished"}}else if(airingAtDate>currentDate){self.postMessage({mediaReleaseAiringAt:media.nextAiringEpisode.airingAt})}if(isJsonObject(media.nextAiringEpisode)){let _releaseDateMillis=airingAt*1e3;if((userStatus!=="Unseen"||weightedScore>minScoreValue)&&typeof _releaseDateMillis==="number"&&_releaseDateMillis>=(new Date).getTime()-dayInMillis){let _title=media.title?.english||media.title?.romaji||media.title?.native;let _releaseEpisode=media.nextAiringEpisode.episode;let _imageURL=media.coverImage?.large||"";let _episodeProgress=userEntriesStatus?.[mediaID]?.episodeProgress||0;self.postMessage({mediaReleaseNotification:{id:mediaID,title:typeof _title==="string"?_title:"",releaseEpisode:_releaseEpisode,maxEpisode:typeof episodes==="number"?episodes:-1,releaseDateMillis:_releaseDateMillis,userStatus:typeof userStatus==="string"?userStatus:"Unseen",imageURL:typeof _imageURL==="string"?_imageURL:"",mediaUrl:typeof mediaUrl==="string"?mediaUrl:"",episodeProgress:typeof _episodeProgress==="number"?_episodeProgress:0}})}}}else if(jsonIsEmpty(media.nextAiringEpisode)&&!(status==="Finished"||status==="Cancelled")&&year){let{month,day}=media.startDate||{};if(parseInt(month)>0){month=parseInt(month)-1}let possibleAiringDate=getJapaneseStartDate({season:season,year:year,month:month,day:day});if(possibleAiringDate&&possibleAiringDate>new Date){media.nextAiringEpisode={airingAt:Math.floor(possibleAiringDate.getTime()/1e3),episode:1}}}let favoriteContents={genres:favouriteGenresIncluded,tags:favouriteTagsIncluded,studios:favouriteStudiosIncluded};let otherContents={genres:genresIncluded,tags:tagsIncluded,studios:studiosIncluded};recommendedMediaListArray.push({id:mediaID,title:media?.title,mediaUrl:mediaUrl,userScore:userEntriesStatus?.[mediaID]?.userScore,mediaRelations:media?.relations?.edges,averageScore:averageScore,popularity:popularity,trending:media?.trending,favorites:media?.favourites,score:score,weightedScore:weightedScore,favoriteContents:favoriteContents,otherContents:otherContents,userStatus:userStatus,status:status,description:media?.description,genres:genres,tags:tags,dateAdded:media?.dateAdded,dateEdited:media?.dateEdited,startDate:media?.startDate,year:year,season:season,format:format,studios:studios,episodes:episodes,episodeProgress:userEntriesStatus?.[mediaID]?.episodeProgress,volumeProgress:userEntriesStatus?.[mediaID]?.volumeProgress,duration:duration,chapters:media?.chapters,volumes:media?.volumes,countryOfOrigin:countryOfOrigin,coverImageUrl:media?.coverImage?.large,trailerID:media?.trailer?.id,bannerImageUrl:media?.bannerImage,trailerThumbnailUrl:media?.trailer?.thumbnail,nextAiringEpisode:media?.nextAiringEpisode})}}else{let{standardDeviation,mean}=arrayMeanAndSTD(averageScoresArray);if(customUserScoreBase>0&&averageScoresArray?.length>0){const averageScoreBase=maxAverageScore<=3?3:maxAverageScore<=5?5:maxAverageScore<=10?10:100;if(customUserScoreBase!==averageScoreBase){standardDeviation=mapValueDirect(standardDeviation,averageScoreBase,customUserScoreBase);mean=mapValueDirect(mean,averageScoreBase,customUserScoreBase)}usedScoreBasis=customUserScoreBase}else{usedScoreBasis=userScoreBase}newHighestRange=Math.min(Math.max(usedScoreBasis-standardDeviation,mean+standardDeviation),usedScoreBasis);newLowestRange=Math.max(Math.min(standardDeviation,mean-standardDeviation),minScoreValue);for(let i=0,l=mediaEntriesArray.length;i<l;i++){loadProgress(i/l*100);let media=mediaEntriesArray[i];let mediaID=media?.id;let mediaUrl=media?.siteUrl;let format=capitalizeWords(media?.format);let countryOfOrigin=media?.countryOfOrigin;let year=media?.seasonYear||media?.startDate?.year||media?.endDate?.year;let season=capitalizeWords(media?.season);let genres=media?.genres||[];let tags=media?.tags||[];let studios=media?.studios?.edges?.filter?.(e=>e?.isMain)||[];let status=capitalizeWords(media?.status);let episodes=media?.episodes;let duration=media?.duration;if(typeof status==="string"&&status){if(filters?.["release status"]&&filters?.["release status"]?.[status]===undefined){filters["release status"][status]=true}}if(typeof format==="string"&&format){if(filters?.format&&filters?.format?.[format]===undefined){filters.format[format]=true}}if(typeof countryOfOrigin==="string"&&countryOfOrigin){if(filters?.["country of origin"]&&filters?.["country of origin"]?.[countryOfOrigin]===undefined){filters["country of origin"][countryOfOrigin]=true}}if(isAN(year)){let yearStr=year?.toString?.();if(typeof yearStr==="string"&&yearStr&&filters?.year&&filters?.year?.[yearStr]===undefined){filters.year[yearStr]=true}}for(let j=0,jl=genres.length;j<jl;j++){let genre=genres[j];if(typeof genre!=="string")continue;if(genre&&filters?.genre&&filters.genre?.[genre]===undefined){filters.genre[genre]=true}}for(let j=0,jl=tags.length;j<jl;j++){let tag=tags[j]?.name;if(typeof tag!=="string")continue;if(tag&&filters?.tag&&filters?.tag?.[tag]===undefined){filters.tag[tag]=true}let tagCategory=tags[j]?.category;if(typeof tagCategory!=="string")continue;if(tagCategory&&filters?.["tag category"]&&filters?.["tag category"]?.[tagCategory]===undefined){filters["tag category"][tagCategory]=true}}for(let j=0,jl=studios.length;j<jl;j++){let studio=studios[j]?.node?.name;if(typeof studio!=="string")continue;if(studio&&filters?.studio&&filters?.studio?.[studio]===undefined){filters.studio[studio]=true}}let score=minScoreValue;let averageScore=media?.averageScore;if(isAN(averageScore)){if(typeof averageScore==="string"){averageScore=parseFloat(averageScore)}}let favourites=media?.favourites;if(isAN(favourites)){if(typeof favourites==="string"){favourites=parseFloat(favourites)}}let popularity=media?.popularity;if(isAN(popularity)){if(typeof popularity==="string"){popularity=parseFloat(popularity)}}if(averageScore>0&&favourites>0&&popularity>0&&isAN(averageScore)&&isAN(favourites)&&isAN(popularity)){let favPopRatio=Math.min(favourites,popularity)/popularity;score=favPopRatio*averageScore}genres=genres.length?genres:[];tags=tags.length?tags.map(e=>{return{name:e?.name,rank:e?.rank}}):[];studios=studios.reduce((result,e)=>{result[e?.node?.name]=e?.node?.siteUrl;return result},{});let weightedScore;if(averageScore>0){if(score>0&&averageScore<averageScoreMode){let ASweight=averageScore/averageScoreMode;weightedScore=score*ASweight}else{weightedScore=score}}let newScore=weightedScore!==score?weightedScore:score;if(popularity>0&&popularityMode>0){if(newScore>0&&popularity<popularityMode){let PSweight=popularity/popularityMode;weightedScore=score*PSweight}else{weightedScore=newScore}}if(!weightedScore||weightedScore<=0||!isFinite(weightedScore)){weightedScore=minScoreValue}if(!score||score<=0||!isFinite(score)){score=minScoreValue}if(score>maxScore){maxScore=score}if(score<minScore){minScore=score}if(weightedScore>maxWeightedScore){maxWeightedScore=weightedScore}if(weightedScore<minWeightedScore){minWeightedScore=weightedScore}if(typeof media?.nextAiringEpisode?.episode==="number"&&!isNaN(media.nextAiringEpisode.episode)&&typeof media.nextAiringEpisode.airingAt==="number"&&!isNaN(media.nextAiringEpisode.airingAt)){let airingAt=media.nextAiringEpisode.airingAt;let airingAtDate=new Date(airingAt*1e3);let currentDate=new Date;if(airingAtDate<=currentDate){if(media.nextAiringEpisode.episode===episodes){media.nextAiringEpisode=null;status="Finished"}}else if(airingAtDate>currentDate){self.postMessage({mediaReleaseAiringAt:media.nextAiringEpisode.airingAt})}if(isJsonObject(media.nextAiringEpisode)){let _releaseDateMillis=airingAt*1e3;if(weightedScore>minScoreValue&&typeof _releaseDateMillis==="number"&&_releaseDateMillis>=(new Date).getTime()-dayInMillis){let _title=media.title?.english||media.title?.romaji||media.title?.native;let _releaseEpisode=media.nextAiringEpisode.episode;let _imageURL=media.coverImage?.large||"";self.postMessage({mediaReleaseNotification:{id:mediaID,title:typeof _title==="string"?_title:"",releaseEpisode:_releaseEpisode,maxEpisode:typeof episodes==="number"?episodes:-1,releaseDateMillis:_releaseDateMillis,userStatus:"Unseen",imageURL:typeof _imageURL==="string"?_imageURL:"",mediaUrl:typeof mediaUrl==="string"?mediaUrl:"",episodeProgress:0}})}}}else if(jsonIsEmpty(media.nextAiringEpisode)&&!(status==="Finished"||status==="Cancelled")&&year){let{month,day}=media.startDate||{};if(parseInt(month)>0){month=parseInt(month)-1}let possibleAiringDate=getJapaneseStartDate({season:season,year:year,month:month,day:day});if(possibleAiringDate&&possibleAiringDate>new Date){media.nextAiringEpisode={airingAt:Math.floor(possibleAiringDate.getTime()/1e3),episode:1}}}recommendedMediaListArray.push({id:mediaID,title:media?.title,mediaUrl:mediaUrl,mediaRelations:media?.relations?.edges,averageScore:averageScore,popularity:popularity,trending:media?.trending,favorites:media?.favourites,score:score,weightedScore:weightedScore,userStatus:"Unseen",status:status,description:media?.description,genres:genres,tags:tags,dateAdded:media?.dateAdded,dateEdited:media?.dateEdited,startDate:media?.startDate,year:year,season:season,format:format,studios:studios,episodes:episodes,duration:duration,chapters:media?.chapters,volumes:media?.volumes,countryOfOrigin:countryOfOrigin,coverImageUrl:media?.coverImage?.large,trailerID:media?.trailer?.id,bannerImageUrl:media?.bannerImage,trailerThumbnailUrl:media?.trailer?.thumbnail,nextAiringEpisode:media?.nextAiringEpisode})}}let userMediaWeightedScores=[],userMediaUserScores=[];let userScoresMedia=[],scoresArray=[],scoreAboveMeanArray=[];recommendedMediaListArray=recommendedMediaListArray.map(media=>{media.score=mapValue(media.score,minScore,maxScore,newLowestRange,newHighestRange);media.weightedScore=mapValue(media.weightedScore,minWeightedScore,maxWeightedScore,newLowestRange,newHighestRange);if(isJsonObject(media.favoriteContents)&&!jsonIsEmpty(media.favoriteContents)){const{genres,tags,studios}=media.favoriteContents;for(const genre in genres){media.favoriteContents.genres[genre]=mapValue(genres[genre],minOthersScore.genres,maxOthersScore.genres,newLowestRange,newHighestRange)}for(const tag in tags){media.favoriteContents.tags[tag]=mapValue(tags[tag],minOthersScore.tags,maxOthersScore.tags,newLowestRange,newHighestRange)}if(customUserScoreBase>0&&customUserScoreBase!==userScoreBase){for(const studio in studios){media.favoriteContents.studios[studio]=mapValueDirect(studios[studio],userScoreBase,customUserScoreBase)}}}if(customUserScoreBase>0&&customUserScoreBase!==userScoreBase){if(isJsonObject(media.otherContents)&&!jsonIsEmpty(media.otherContents)){const{genres,tags,studios}=media.otherContents;for(const genre in genres){media.otherContents.genres[genre]=mapValue(genres[genre],minOthersScore.genres,maxOthersScore.genres,newLowestRange,newHighestRange)}for(const tag in tags){media.otherContents.tags[tag]=mapValue(tags[tag],minOthersScore.tags,maxOthersScore.tags,newLowestRange,newHighestRange)}for(const studio in studios){media.otherContents.studios[studio]=mapValueDirect(studios[studio],userScoreBase,customUserScoreBase)}}}if(media.userScore!=null&&media.userScore>0){if(media.userScore>=meanUserScore){scoreAboveMeanArray.push(media.score)}userScoresMedia.push(media);if(media.userScore>(customUserScoreBase===0?1:0)){userMediaWeightedScores.push(media.weightedScore);userMediaUserScores.push(mapValue(media.userScore,minUserScore,userScoreBase,newLowestRange,newHighestRange))}}scoresArray.push(media.score);return media});if(scoresArray?.length){meanScoreAll=arrayMean(scoresArray)}if(scoreAboveMeanArray?.length){meanScoreAbove=arrayMean(scoreAboveMeanArray)}let recommendedMediaList={};for(let i=0,l=recommendedMediaListArray.length;i<l;i++){let media=recommendedMediaListArray[i];let mediaID=media.id;media.meanScoreAll=meanScoreAll>=newLowestRange?meanScoreAll:newLowestRange;media.meanScoreAbove=meanScoreAbove>=newLowestRange?meanScoreAbove:newLowestRange;recommendedMediaList[mediaID]=media}const collectionToPut={recommendedMediaList:recommendedMediaList,filters:filters,shouldLoadMedia:true,shouldProcessRecommendation:false};if(hasNewAlgorithmFilter){collectionToPut.algorithmFilters=algorithmFilters}let recListMAPE=calculateError(userMediaUserScores,userMediaWeightedScores,minUserScore,usedScoreBasis);if(recListMAPE!=null){collectionToPut.recListMAPE=recListMAPE;self.postMessage({recListMAPE:recListMAPE})}await saveJSONCollection(collectionToPut);self.postMessage({status:null});self.postMessage({progress:100});self.postMessage({message:"success",passedAlgorithmFilterId:data?.passedAlgorithmFilterId})}catch(reason){console.error(reason);let error=reason?.stack||reason?.message;if(typeof error!=="string"||!error){error="Something went wrong"}self.postMessage({error:error})}};function jsonIsEmpty(obj){for(const key in obj){return false}return true}function isAN(num){if(!num&&num!==0){return false}else if(typeof num==="boolean"){return false}else if(typeof num==="string"&&!num){return false}return!isNaN(num)}function isJson(j){try{return j?.constructor.name==="Object"&&`${j}`==="[object Object]"}catch(e){return false}}function mapValue(originalValue,lowestValue,highestValue,newLowestRange,newHighestRange){let mappedValue=(originalValue-lowestValue)*(newHighestRange-newLowestRange)/(highestValue-lowestValue)+newLowestRange;return mappedValue}function mapValueDirect(originalValue,highestValue,newHighestRange){return originalValue/highestValue*newHighestRange}function arrayMeanAndSTD(obj){if(obj.length===0)return 0;const mean=arrayMean(obj);const standardDeviation=Math.sqrt(obj.reduce((sum,value)=>sum+Math.pow(value-mean,2),0)/obj.length);return{mean:mean,standardDeviation:standardDeviation>=0?standardDeviation:0}}function arrayMean(obj){return arraySum(obj)/obj.length||0}function arraySum(obj){return obj.reduce((a,b)=>a+b,0)}function arrayMedian(arr){const sortedArr=arr.slice().sort((a,b)=>a-b);const n=sortedArr.length;if(n%2===0){const middleRight=n/2;const middleLeft=middleRight-1;return(sortedArr[middleLeft]+sortedArr[middleRight])/2}else{const middle=Math.floor(n/2);return sortedArr[middle]}}function arrayMode(obj){if(obj.length===0){return}else if(obj.length===1){return obj[0]}else if(obj.length===2){return(obj[0]+obj[1])/2}let max=parseFloat(getMax(obj));let min=parseFloat(getMin(obj));const boundary=minNumber;let classW=parseFloat((max-min)/(1+3.322*Math.log(obj.length)));let classIs=[];if(max===min||classW<boundary){classIs=[{low:min,high:max,freq:0}]}else{let high=min+classW-boundary,low=min;classIs=[{low:low,high:high,freq:0}];while(classIs.slice(-1)[0].high<max){low=high+boundary;high=low+classW-boundary;classIs.push({low:low,high:high,freq:0})}}for(let i=0,l=obj.length;i<l;i++){let num=obj[i];for(let j=0,jl=classIs.length;j<jl;j++){if(num>=classIs[j].low&&num<=classIs[j].high){++classIs[j].freq;continue}}}let modeClass=classIs[0];let modeIdx=0;for(let i=1,l=classIs.length;i<l;i++){if(classIs[i].freq>modeClass.freq){modeClass=classIs[i];modeIdx=i}}let modLowLim=modeClass.low;let modFreq=modeClass.freq;let modPreFreq=!classIs[modeIdx-1]?0:classIs[modeIdx-1].freq;let modSucFreq=!classIs[modeIdx+1]?0:classIs[modeIdx+1].freq;return modLowLim+(modFreq-modPreFreq)/(2*modFreq-modPreFreq-modSucFreq)*classW}function arrayProbability(obj){if(!obj?.length)return 0;return obj.reduce((a,b)=>a*b,1)}function getMax(arr){let len=arr.length;let max=-Infinity;while(len--){max=arr[len]>max?arr[len]:max}return max}function getMin(arr){let len=arr.length;let min=Infinity;while(len--){min=arr[len]<min?arr[len]:min}return min}function linearRegression(XY){let lr={};let n=XY.length;let sum_x=0;let sum_y=0;let sum_xy=0;let sum_xx=0;let sum_yy=0;for(let i=0,l=XY.length;i<l;i++){sum_x+=XY[i][0];sum_y+=XY[i][1];sum_xy+=XY[i][0]*XY[i][1];sum_xx+=XY[i][0]*XY[i][0];sum_yy+=XY[i][1]*XY[i][1]}lr["slope"]=(n*sum_xy-sum_x*sum_y)/(n*sum_xx-sum_x*sum_x);lr["intercept"]=(sum_y-lr.slope*sum_x)/n;lr["r2"]=Math.pow((n*sum_xy-sum_x*sum_y)/Math.sqrt((n*sum_xx-sum_x*sum_x)*(n*sum_yy-sum_y*sum_y)),2);return lr}function LRpredict(modelObj,x){if(!modelObj)return null;if(!modelObj.slope||!modelObj.intercept)return null;if(isNaN(modelObj.slope)||isNaN(modelObj.intercept))return null;return parseFloat(modelObj.slope)*x+parseFloat(modelObj.intercept)}function LRpredictInverse(modelObj,y){if(!modelObj)return null;if(!modelObj.slope||!modelObj.intercept)return null;if(isNaN(modelObj.slope)||isNaN(modelObj.intercept))return null;if(parseFloat(modelObj.slope)===0)return null;return(parseFloat(y)-parseFloat(modelObj.intercept))/parseFloat(modelObj.slope)}function calculateError(actual,predicted,minval,maxval){const range=maxval-minval;let totalError=0;for(let i=0;i<actual?.length;i++){totalError+=Math.abs(actual[i]-predicted[i])/range}const error=totalError/actual?.length;return error>=0?error*100:null}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}function IDBinit(){return new Promise(resolve=>{let request=indexedDB.open("Kanshi.Media.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onsuccess=event=>{db=event.target.result;resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("others");event.target.transaction.oncomplete=()=>{resolve()}};request.onerror=error=>{console.error(error)}})}function retrieveJSON(name){return new Promise(resolve=>{try{let get=db.transaction("others","readonly").objectStore("others").get(name);get.onsuccess=()=>{let result=get.result;if(result instanceof Blob){result=JSON.parse((new FileReaderSync).readAsText(result))}else if(result instanceof ArrayBuffer){result=JSON.parse((new TextDecoder).decode(result))}resolve(result)};get.onerror=ex=>{console.error(ex);resolve()}}catch(ex){console.error(ex);resolve()}})}function saveJSONCollection(collection){return new Promise((resolve,reject)=>{try{let transaction=db.transaction("others","readwrite");let store=transaction.objectStore("others");let put;transaction.oncomplete=()=>{resolve()};for(let key in collection){let data=collection[key];let blob;if(data instanceof Blob){blob=data;put=store.put(blob,key)}else if(isJsonObject(data)||data instanceof Array){blob=new Blob([JSON.stringify(data)]);put=store.put(blob,key)}else{put=store.put(data,key)}put.onerror=ex=>{transaction.oncomplete=undefined;if(blob instanceof Blob){try{transaction.oncomplete=()=>{resolve()};put=store.put((new FileReaderSync).readAsArrayBuffer(blob),key);put.onerror=ex=>{console.error(ex);reject(ex)};try{transaction?.commit?.()}catch{}}catch(ex2){console.error(ex);console.error(ex2);reject(ex2)}}else{console.error(ex);reject(ex)}}}try{transaction?.commit?.()}catch{}}catch(ex){console.error(ex);reject(ex)}})}function getJapaneseStartDate({season,year,month,day}){if(parseInt(year)>=0){if(parseInt(month)>=0){return new Date(parseInt(year),parseInt(month),parseInt(day||1)||1)}const seasonKey=season?.trim();if(typeof seasonKey==="string"&&(seasonKey==="Winter"||seasonKey==="Spring"||seasonKey==="Summer"||seasonKey==="Fall")&&!isNaN(year)){let seasons={Winter:new Date(parseInt(year),0,1),Spring:new Date(parseInt(year),3,1),Summer:new Date(parseInt(year),6,1),Fall:new Date(parseInt(year),9,1)};return seasons[seasonKey]}return new Date(parseInt(year),0,1)}else{return null}}function capitalizeWords(str){if(typeof str!=="string")return;return str.toLowerCase().replace(/_/g," ").replace(/\b\w/g,char=>char.toUpperCase()).replace(/\b(tv|ova|ona)\b/gi,match=>match.toUpperCase())}let startPost=performance.now();function loadProgress(progress){let endPost=performance.now();if(endPost-startPost>17){self.postMessage({progress:progress});startPost=endPost}}