let db,userList,recommendedAnimeList,semiContentCautions={genres:{},tags:{}},cautionContents={genres:{},tags:{}},loadedIds={},loadedIndices={},loadAnimeTimeout={},lastSearchedWord={},shouldUpdateUserList,shouldUpdateRecommendedAnimeList,shouldUpdateAnimeCautions,updateListTimeout,selectCategoryTimeout,messageQueue=[],isProcessing;const createKSVG=(classes="")=>`<svg class="general-rating-icon ${classes}" viewBox="0 0 320 512"><path d="M311 86a32 32 0 1 0-46-44L110 202l-46 47V64a32 32 0 1 0-64 0v384a32 32 0 1 0 64 0V341l65-67 133 192c10 15 30 18 44 8s18-30 8-44L174 227 311 86z"/></svg>`;const hasOwnProperty=Object.prototype.hasOwnProperty;self.addEventListener("unhandledrejection",event=>{console.error(event?.reason);self.postMessage({error:event?.reason||"Something went wrong"})});self.onmessage=({data})=>{messageQueue.push(data);if(!isProcessing){isProcessing=true;executeMessage()}};async function executeMessage(){const data=messageQueue.shift();try{if(!db)await IDBinit();if(hasOwnProperty.call(data,"loadMore")){let selectedCategory=data?.selectedCategory;if(recommendedAnimeList!=null&&userList!=null&&selectedCategory!=null){clearTimeout(loadAnimeTimeout[selectedCategory]);loadAnimeTimeout[selectedCategory]=setTimeout(()=>{let categories=userList?.categories;let category=categories?.[selectedCategory];if(category==null)return;let{animeList,shownSortName}=category;const searchedWord=data?.searchedWord;const shouldReload=data?.reload||searchedWord!==lastSearchedWord[selectedCategory];lastSearchedWord[selectedCategory]=searchedWord;let idx=shouldReload?0:loadedIndices[selectedCategory]??0;loadedIndices[selectedCategory]=idx+1;let animeListLen=animeList.length;if(typeof searchedWord==="string"){const query=searchedWord.trim().replace(/([^a-zA-Z0-9])/g,"").toLowerCase();animeList=animeList.filter(id=>{let title=recommendedAnimeList[id]?.title;if(isJsonObject(title)){return Object.values(title).some($title=>typeof $title==="string"&&$title.trim().replace(/([^a-zA-Z0-9])/g,"").toLowerCase().includes(query))}});animeListLen=animeList.length}if(idx<animeListLen||animeListLen===0){let id=animeList[idx];let anime=editAnime(recommendedAnimeList[id],shownSortName);let airingAt=anime?.nextAiringEpisode?.airingAt;self.postMessage({loadMore:true,selectedCategory:selectedCategory,idx:idx,anime:anime,airingAt:airingAt*1e3>(new Date).getTime()?airingAt:undefined,isLast:idx+1>=animeListLen});loadedIds[selectedCategory]=animeList.slice(0,idx).map(id=>id)}},0)}}else if(hasOwnProperty.call(data,"selectCategory")){let selectedCategory=data?.selectCategory;if(userList!=null&&selectedCategory!=null){let categories=userList?.categories;let category=categories?.[selectedCategory];if(category==null)return;let{animeFilters,sortBy}=category;self.postMessage({updateList:true,reloadList:true,selectedCategory:selectedCategory,category:{animeFilters:animeFilters,sortBy:sortBy}});userList.selectedCategory=selectedCategory}}else if(hasOwnProperty.call(data,"getEarlisetReleaseDate")){if(recommendedAnimeList==null)return;let loadedListsArrays=Object.values(loadedIds);let flattenedLoadedList=loadedListsArrays.reduce((acc,curr)=>{for(let i=0,l=curr?.length;i<l;i++){acc.push(curr[i])}return acc},[]);let loadedList=flattenedLoadedList.map(id=>recommendedAnimeList[id]);if(loadedList.length){const currentDate=new Date;loadedList=loadedList.filter(e=>e?.nextAiringEpisode?.airingAt*1e3>currentDate);if(loadedList.length){loadedList.sort((a,b)=>{let x=a?.nextAiringEpisode?.airingAt,y=b?.nextAiringEpisode?.airingAt;x=x!=null?x:Infinity;y=y!=null?y:Infinity;return x-y});let earliestReleaseDate=loadedList?.[0]?.nextAiringEpisode?.airingAt;if(typeof earliestReleaseDate==="number"&&!isNaN(earliestReleaseDate)){self.postMessage({getEarlisetReleaseDate:true,earliestReleaseDate:earliestReleaseDate})}}}}else if(hasOwnProperty.call(data,"loadInit")){userList=await retrieveJSON("userList");if(!isJsonObject(userList)||jsonIsEmpty(userList)){userList=null;self.postMessage({loadAll:true,shouldReloadList:true,postId:data.postId})}else{let{selectedCategory,hiddenEntries,animeCautions}=userList;let categories=userList?.categories||{};let category=categories?.[selectedCategory]||{};let{animeFilters,sortBy}=category;for(let i=0,l=animeCautions?.length;i<l;i++){let{status,filterType,optionName,optionCategory}=animeCautions[i]||{};if(status==="included"){if(filterType==="selection"){if(optionCategory==="genre"){semiContentCautions.genres[optionName.toLowerCase()]=true}else if(optionCategory==="tag"){semiContentCautions.tags[optionName.toLowerCase()]=true}}}else if(status==="excluded"){if(filterType==="selection"){if(optionCategory==="genre"){cautionContents.genres[optionName.toLowerCase()]=true}else if(optionCategory==="tag"){cautionContents.tags[optionName.toLowerCase()]=true}}}}recommendedAnimeList=await retrieveJSON("recommendedAnimeList");self.postMessage({loadAll:true,categories:Object.keys(categories||{}).sort().reduce((acc,rec)=>{acc[rec]=1;return acc},{}),hiddenEntries:hiddenEntries,animeCautions:animeCautions,selectedCategory:selectedCategory,category:{animeFilters:animeFilters,sortBy:sortBy},reload:true,postId:data.postId})}}else{shouldUpdateUserList=shouldUpdateUserList||hasOwnProperty.call(data,"updateUserList");shouldUpdateRecommendedAnimeList=shouldUpdateRecommendedAnimeList||hasOwnProperty.call(data,"updateRecommendedAnimeList");shouldUpdateAnimeCautions=shouldUpdateAnimeCautions||hasOwnProperty.call(data,"updateAnimeCautions");const updateList=shouldUpdateCategories=>{let promises=[];if(shouldUpdateRecommendedAnimeList){promises.push(new Promise(async resolve=>{recommendedAnimeList=await retrieveJSON("recommendedAnimeList")||recommendedAnimeList;shouldUpdateRecommendedAnimeList=false;resolve()}))}if(shouldUpdateAnimeCautions){promises.push(new Promise(async resolve=>{userList=await retrieveJSON("userList")||userList;let animeCautions=userList?.animeCautions;if(animeCautions instanceof Array){semiContentCautions={genres:{},tags:{}};cautionContents={genres:{},tags:{}};for(let i=0,l=animeCautions?.length;i<l;i++){let{status,filterType,optionName,optionCategory}=animeCautions[i]||{};if(status==="included"){if(filterType==="selection"){if(optionCategory==="genre"){semiContentCautions.genres[optionName.toLowerCase()]=true}else if(optionCategory==="tag"){semiContentCautions.tags[optionName.toLowerCase()]=true}}}else if(status==="excluded"){if(filterType==="selection"){if(optionCategory==="genre"){cautionContents.genres[optionName.toLowerCase()]=true}else if(optionCategory==="tag"){cautionContents.tags[optionName.toLowerCase()]=true}}}}}shouldUpdateUserList=shouldUpdateAnimeCautions=false;resolve()}))}else if(shouldUpdateUserList){promises.push(new Promise(async resolve=>{userList=await retrieveJSON("userList")||userList;shouldUpdateUserList=false;resolve()}))}Promise.all(promises).then(()=>{if(shouldUpdateCategories){let categories=userList?.categories||{};let updatedCategoryKey=data?.updatedCategoryKey;if(updatedCategoryKey!=null){let category=categories?.[updatedCategoryKey];if(category==null)return;let{animeFilters,sortBy}=category;self.postMessage({updateList:true,reloadList:true,categories:Object.keys(categories||{}).sort().reduce((acc,rec)=>{acc[rec]=1;return acc},{}),updatedCategoryKey:updatedCategoryKey,category:{animeFilters:animeFilters,sortBy:sortBy},postId:data.postId})}else{self.postMessage({updateList:true,categories:Object.keys(categories||{}).sort().reduce((acc,rec)=>{acc[rec]=1;return acc},{}),postId:data.postId})}}else{self.postMessage({reloadList:true,postId:data.postId})}})};clearTimeout(updateListTimeout);if(hasOwnProperty.call(data,"updateCategories")){updateList(true)}else{updateListTimeout=setTimeout(()=>updateList())}}}catch(error){console.error(error);self.postMessage({error:error,postId:data.postId})}if(messageQueue.length>0){executeMessage()}else{isProcessing=false}}function editAnime(anime,shownSortName){if(anime==null)return null;anime=JSON.parse(JSON.stringify(anime));if(hasOwnProperty.call(anime,"isEdited")){return anime}anime.contentCaution={caution:[],semiCaution:[]};anime.genres.forEach(genre=>{if(cautionContents.genres[genre?.toLowerCase?.()]){anime.contentCaution.caution.push(genre)}else if(semiContentCautions.genres[genre?.toLowerCase?.()]){anime.contentCaution.semiCaution.push(genre)}});anime.tags.forEach(tag=>{let tagName=tag?.name||tag;if(cautionContents.tags[tagName?.toLowerCase?.()]){anime.contentCaution.caution.push(tagName)}else if(semiContentCautions.tags[tagName?.toLowerCase?.()]){anime.contentCaution.semiCaution.push(tagName)}});if(isJsonObject(anime.favoriteContents)&&!jsonIsEmpty(anime.favoriteContents)){let sortedFavoriteContents=Object.entries(anime.favoriteContents.genres).concat(Object.entries(anime.favoriteContents.tags)).concat(Object.entries(anime.favoriteContents.studios)).sort((a,b)=>{return b[1]-a[1]}).map(([k,v])=>`${k}: (${formatNumber(v)})`);anime.sortedFavoriteContents=sortedFavoriteContents||[]}else{anime.sortedFavoriteContents=[]}let genres=anime?.genres;if(genres?.length){let favouriteGenres=anime?.favoriteContents?.genres||{},contentCaution=anime?.contentCaution,caution={},semiCaution={};if(isJsonObject(contentCaution)&&!jsonIsEmpty(contentCaution)){contentCaution?.caution.forEach(genre=>{caution[genre.trim().toLowerCase()]=true});contentCaution?.semiCaution.forEach(genre=>{semiCaution[genre.trim().toLowerCase()]=true})}let genresFavourite=[],genreCaution=[],genreSemiCaution=[],others=[],genresRunnned={};genres.forEach(genre=>{if(genresRunnned[genre]||!genre)return;genresRunnned[genre]=true;let trimmedGenre=genre?.trim?.().toLowerCase?.();if(caution[trimmedGenre]){if(favouriteGenres[trimmedGenre]>0){genre=`${genre} (${formatNumber(favouriteGenres[trimmedGenre])})`}genreCaution.push({genre:genre,genreColor:"red"})}else if(semiCaution[trimmedGenre]){if(favouriteGenres[trimmedGenre]>0){genre=`${genre} (${formatNumber(favouriteGenres[trimmedGenre])})`}genreSemiCaution.push({genre:genre,genreColor:"teal"})}else if(favouriteGenres[trimmedGenre]){genresFavourite.push({genre:genre,score:favouriteGenres[trimmedGenre]})}else if(favouriteGenres[trimmedGenre]>0){genresFavourite.push({genre:genre,score:favouriteGenres[trimmedGenre]})}else{others.push({genre:genre,genreColor:null})}});genresFavourite.sort((a,b)=>{return b.score-a.score});genresFavourite=genresFavourite.map(e=>{return{genre:`${e.genre} (${formatNumber(e.score)})`,genreColor:"green"}});anime.shownGenres=genreCaution.concat(genreSemiCaution).concat(genresFavourite).concat(others)}else{anime.shownGenres=[]}let tags=anime?.tags;if(tags?.length){let favouriteTags=anime?.favoriteContents?.tags||{},contentCaution=anime?.contentCaution,caution={},semiCaution={};if(isJsonObject(contentCaution)&&!jsonIsEmpty(contentCaution)){contentCaution?.caution.forEach(tag=>{caution[tag.trim().toLowerCase()]=true});contentCaution?.semiCaution.forEach(tag=>{semiCaution[tag.trim().toLowerCase()]=true})}let tagsFavourite=[],tagCaution=[],tagSemiCaution=[],others=[];let tagsRunnned={};tags.sort((a,b)=>{return b?.rank-a?.rank});tags.forEach(tag=>{let tagName=tag?.name||tag;if(tagsRunnned[tagName]||!tagName)return;tagsRunnned[tagName]=true;let tagRank=tag?.rank,trimmedTag=tagName?.trim?.().toLowerCase?.();if(caution[trimmedTag]){if(favouriteTags[trimmedTag]>0){tag=`<span>${tagName} (${formatNumber(favouriteTags[trimmedTag])})${tagRank?"</span><span> "+tagRank+"%":""}</span>`}else{tag=`<span>${tagName}${tagRank?"</span><span> "+tagRank+"%":""}</span>`}tagCaution.push({tagName:tagName,tag:tag,tagColor:"red",copyValue:`${tagName}${tagRank?" "+tagRank+"%":""}`})}else if(semiCaution[trimmedTag]){if(favouriteTags[trimmedTag]>0){tag=`<span>${tagName} (${formatNumber(favouriteTags[trimmedTag])})${tagRank?"</span><span> "+tagRank+"%":""}</span>`}else{tag=`<span>${tagName}${tagRank?"</span><span> "+tagRank+"%":""}</span>`}tagSemiCaution.push({tagName:tagName,tag:tag,tagColor:"teal",copyValue:`${tagName}${tagRank?" "+tagRank+"%":""}`})}else if(favouriteTags[trimmedTag]>0){tagsFavourite.push({tag:tag,score:favouriteTags[trimmedTag]})}else{others.push({tagName:tagName,tag:`<span>${tagName}${tagRank?"</span><span> "+tagRank+"%":""}</span>`,tagColor:null,copyValue:`${tagName}${tagRank?" "+tagRank+"%":""}`})}});tagsFavourite.sort((a,b)=>{return b.score-a.score});tagsFavourite=tagsFavourite.map(e=>{let tagName=e?.tag?.name||e?.tag;let tagRank=e?.tag?.rank;return{tagName:tagName,tag:`<span>${tagName} (${formatNumber(e.score)})${tagRank?"</span><span> "+tagRank+"%":""}</span>`,tagColor:"green",copyValue:`${tagName} (${formatNumber(e.score)})${tagRank?" "+tagRank+"%":""}`}});anime.shownTags=tagCaution.concat(tagSemiCaution).concat(tagsFavourite).concat(others)}else{anime.shownTags=[]}let studios=Object.entries(anime.studios||{});if(studios?.length){let favouriteStudios=anime?.favoriteContents?.studios||{},otherStudios=anime?.otherContents?.studios||{},studiosFavourite=[],studiosOthers=[],others=[],studiosRunnned={};studios.forEach(([studio,studioUrl])=>{if(studiosRunnned[studio]||!studio)return;studiosRunnned[studio]=true;let trimmedStudio=studio?.trim?.().toLowerCase?.();if(favouriteStudios[trimmedStudio]>0){studiosFavourite.push({studio:[studio,studioUrl],score:favouriteStudios[trimmedStudio]})}else if(otherStudios[trimmedStudio]>0){studiosOthers.push({studio:[studio,studioUrl],score:otherStudios[trimmedStudio]})}else{others.push({studio:{studioName:studio,studioUrl:studioUrl},studioColor:null})}});studiosFavourite.sort((a,b)=>{return b.score-a.score});studiosFavourite=studiosFavourite.map(e=>{return{studio:{studioName:`${e.studio[0]} (${formatNumber(e.score)})`,studioUrl:e.studio[1]},studioColor:"green"}});studiosOthers.sort((a,b)=>{return b.score-a.score});studiosOthers=studiosOthers.map(e=>{return{studio:{studioName:`${e.studio[0]} (${formatNumber(e.score)})`,studioUrl:e.studio[1]},studioColor:null}});anime.shownStudios=studiosFavourite.concat(studiosOthers).concat(others)}else{anime.shownStudios=[]}let title=anime?.title;anime.shownTitle=title?.english||title?.userPreferred||title?.romaji||title?.native||"";anime.copiedTitle=title?.romaji||title?.userPreferred||title?.english||title?.native||"";let score=anime?.score;let meanScoreAll=anime?.meanScoreAll;let meanScoreAbove=anime?.meanScoreAbove;let sortedFavoriteContents=anime?.sortedFavoriteContents;let contentCaution=anime?.contentCaution;let _sortedFavoriteContents=[];sortedFavoriteContents?.forEach(e=>{if(typeof e==="string"){_sortedFavoriteContents.push(e)}});let _contentCaution=[];if(score<meanScoreAll){_contentCaution.push(`Very Low Score (mean: ${formatNumber(meanScoreAll)})`)}else if(score<meanScoreAbove){_contentCaution.push(`Low Score (mean: ${formatNumber(meanScoreAbove)})`)}_contentCaution=_contentCaution.concat(contentCaution?.caution||[]).concat(contentCaution?.semiCaution||[]);let briefInfo="";if(_sortedFavoriteContents.length){briefInfo+="Favorite Contents: "+_sortedFavoriteContents.join(", ")||""}if(_contentCaution.length){briefInfo+="\n\nContent Cautions: "+_contentCaution.join(", ")}anime.briefInfo=briefInfo;let userStatus=anime?.userStatus;if(ncsCompare(userStatus,"completed")){anime.userStatusColor="green"}else if(ncsCompare(userStatus,"current")||ncsCompare(userStatus,"repeating")){anime.userStatusColor="blue"}else if(ncsCompare(userStatus,"planning")){anime.userStatusColor="orange"}else if(ncsCompare(userStatus,"paused")){anime.userStatusColor="peach"}else if(ncsCompare(userStatus,"dropped")){anime.userStatusColor="red"}let contentCautionColor;if(contentCaution?.caution?.length){contentCautionColor="red"}else if(contentCaution?.semiCaution?.length){contentCautionColor="teal"}else if(score<meanScoreAll){contentCautionColor="purple"}else if(score<meanScoreAbove){contentCautionColor="orange"}else{contentCautionColor="green"}anime.contentCautionColor=contentCautionColor;anime.formattedWeightedScore=formatNumber(anime?.weightedScore);anime.formattedAverageScore=formatNumber(anime?.averageScore*.1,1);anime.formattedPopularity=formatNumber(anime?.popularity,anime?.popularity>=1e3?1:0);if(shownSortName==="score"||shownSortName==="date"||shownSortName==="date added"||shownSortName==="date updated"){anime.shownScore=formatNumber(score)??"N/A"}else if(shownSortName==="user score"){anime.shownScore=anime?.userScore??"N/A"}else if(shownSortName==="average score"){anime.shownScore=anime?.averageScore??"N/A"}else if(shownSortName==="popularity"){anime.shownCount=anime.formattedPopularity??"N/A"}else if(shownSortName==="trending"){anime.shownActivity=formatNumber(anime?.trending,anime?.trending>=1e3?1:0)??"N/A"}else if(shownSortName==="favorites"){anime.shownFavorites=formatNumber(anime?.favorites,anime?.favorites>=1e3?1:0)??"N/A"}else{anime.shownScore=anime.formattedWeightedScore??"N/A"}let recommendedRatingInfo;if(score<meanScoreAll){recommendedRatingInfo=createKSVG("purple-fill")}else if(score<meanScoreAbove){recommendedRatingInfo=createKSVG("orange-fill")}else{recommendedRatingInfo=createKSVG("green-fill")}anime.recommendedRatingInfo=recommendedRatingInfo;let duration=anime?.duration;if(duration>0){let time=msToTime(duration*60*1e3);anime.formattedDuration=` · ${time?time:""}`}anime.isEdited=true;return anime}function formatNumber(number,dec=2){if(typeof number==="number"){const formatter=new Intl.NumberFormat("en-US",{maximumFractionDigits:dec,minimumFractionDigits:0,notation:"compact",compactDisplay:"short"});if(Math.abs(number)>=1e3){return formatter.format(number)}else if(Math.abs(number)<.01&&Math.abs(number)>0){return number.toExponential(0)}else{let formattedNumber=number.toFixed(dec);if(formattedNumber.indexOf(".")!==-1){formattedNumber=formattedNumber.replace(/\.?0+$/,"")}return formattedNumber||number.toLocaleString("en-US",{maximumFractionDigits:dec})}}else{return null}}function msToTime(duration,limit){try{if(duration<1e3){return"0s"}let seconds=Math.floor(duration/1e3%60),minutes=Math.floor(duration/6e4%60),hours=Math.floor(duration/36e5%24),days=Math.floor(duration/864e5%7),weeks=Math.floor(duration/6048e5%4),months=Math.floor(duration/24192e5%12),years=Math.floor(duration/290304e5%10),decades=Math.floor(duration/290304e6%10),century=Math.floor(duration/290304e7%10),millenium=Math.floor(duration/290304e8%10);let time=[];if(millenium>0)time.push(`${millenium}mil`);if(century>0)time.push(`${century}cen`);if(decades>0)time.push(`${decades}dec`);if(years>0)time.push(`${years}y`);if(months>0)time.push(`${months}mon`);if(weeks>0)time.push(`${weeks}w`);if(days>0)time.push(`${days}d`);if(hours>0)time.push(`${hours}h`);if(minutes>0)time.push(`${minutes}m`);if(seconds>0)time.push(`${seconds}s`);if(limit>0){time=time.slice(0,limit)}return time.join(" ")||"0s"}catch(e){return""}}function ncsCompare(str1,str2){if(typeof str1!=="string"||typeof str2!=="string"){return false}return str1.toLowerCase()===str2.toLowerCase()}async function IDBinit(){return await new Promise(resolve=>{let request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onerror=error=>{console.error(error)};request.onsuccess=event=>{db=event.target.result;return resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("MyObjectStore");let transaction=event.target.transaction;transaction.oncomplete=()=>{return resolve()}}})}async function saveJSON(data,name){return await new Promise(async(resolve,reject)=>{try{let write=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").openCursor();write.onsuccess=async event=>{let put=await db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").put(data,name);put.onsuccess=event=>{return resolve()};put.onerror=event=>{return resolve()}};write.onerror=async error=>{console.error(error);return reject()}}catch(ex){console.error(ex)}})}async function retrieveJSON(name){return await new Promise(resolve=>{try{let read=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").get(name);read.onsuccess=()=>{return resolve(read.result)};read.onerror=error=>{console.error(error);return resolve()}}catch(ex){console.error(ex);return resolve()}})}function jsonIsEmpty(obj){for(const key in obj){return false}return true}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}