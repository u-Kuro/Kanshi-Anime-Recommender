let db,windowHREF,isShowingProgress,isShowingProgressTimeout;const entriesVersion=4;const maxArraySize=65535;const maxAnimePerPage=50;const maxStaffPerPage=25;const excludedFormats={music:true};const animeFormats={tv:true,tv_short:true,movie:true,special:true,ova:true,ona:true};const currentRequestTimestamp=(new Date).getTime();let newAddedEntriesCount=0,lastAddedEntriesCount=0;let newEditedEntriesCount=0,lastEditedEntriesCount=0;let minimizeTransaction=false;let onlyGetNewEntries;self.addEventListener("unhandledrejection",event=>{console.error(event?.reason);self.postMessage({error:event?.reason||"Something went wrong"})});self.onmessage=async({data})=>{if(!db)await IDBinit();if(!windowHREF&&data?.windowHREF){windowHREF=data.windowHREF}if(data?.hasOwnProperty("minimizeTransaction")){minimizeTransaction=data?.minimizeTransaction}else{onlyGetNewEntries=data?.onlyGetNewEntries??false;let animeUpdateAt=await retrieveJSON("animeUpdateAt")||1706674120;let animeEntries=await retrieveJSON("animeEntries");let excludedEntries=await retrieveJSON("excludedEntries")||{};if(isJsonObject(animeEntries)){if(jsonIsEmpty(animeEntries)){self.postMessage({getEntries:true})}else{getNewEntries(animeEntries,excludedEntries,animeUpdateAt)}}else{self.postMessage({noEntriesFound:true})}}async function getNewEntries(animeEntries,excludedEntries,animeUpdateAt){const lastHighestID=Math.max(getMax(Object.keys(animeEntries).concat(Object.keys(excludedEntries)).map(id=>parseInt(id)))||1,1);let foundLastHighestID=false;let percentage,newLowestID,newHighestID,largestDif;self.postMessage({status:"Checking New Entries"});let shouldUpdateAnimeEntries,shouldUpdateExcludedEntries;let highestIncludedEntryID=-Infinity,highestExcludedEntryID=-Infinity;function recallGNE(page){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{Page(page:${page},perPage:${maxAnimePerPage}){pageInfo{hasNextPage}media(sort:ID_DESC){id updatedAt title{romaji english native}relations{edges{relationType(version:2)node{id popularity}}}description siteUrl averageScore episodes chapters volumes countryOfOrigin duration trending popularity favourites format genres status(version:2)coverImage{large}trailer{id thumbnail site}bannerImage tags{name rank category}studios{edges{node{name siteUrl isAnimationStudio}isMain}}startDate{month day year}endDate{month day year}seasonYear season staff(perPage:${maxStaffPerPage},page:1,sort:RELEVANCE){edges{node{name{userPreferred}siteUrl}role}}nextAiringEpisode{episode airingAt}}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(async({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){if(onlyGetNewEntries){self.postMessage({errorDuringInit:true})}let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallGNE(page)},6e4)}else{let Page=result?.data?.Page;let media=Page?.media||[];if(media instanceof Array&&media.length){for(let anime of media){const currentId=anime?.id;if(typeof currentId==="number"&&!isNaN(currentId)&&isFinite(currentId)){foundLastHighestID=foundLastHighestID||currentId===lastHighestID;if(newHighestID==null||currentId>newHighestID){newHighestID=currentId;if(largestDif==null){largestDif=newHighestID-lastHighestID}else{largestDif=Math.max(largestDif,newHighestID-lastHighestID)}}if(newLowestID==null||currentId<newLowestID){newLowestID=currentId;if(lastHighestID>=newLowestID&&newLowestID&&lastHighestID){break}else if(newHighestID&&lastHighestID<=newLowestID&&newHighestID>newLowestID){percentage=(largestDif-(newLowestID-lastHighestID))/largestDif*100}}const loweredFormat=anime?.format?.trim?.()?.toLowerCase?.();if((typeof anime?.format!=="string"||!excludedFormats[loweredFormat])&&!anime?.genres?.some?.(genre=>genre?.trim?.()?.toLowerCase?.()==="hentai")){if(anime?.genres instanceof Array){let unique={};anime.genres=anime.genres.filter(genre=>{if(genre&&!unique[genre]){unique[genre]=true;return true}else{return false}})}if(anime?.tags instanceof Array){let unique={};anime.tags=anime.tags.filter(tag=>{let _tag=tag?.name;if(_tag&&!unique[_tag]){unique[_tag]=true;return true}else{return false}})}if(anime?.studios?.edges instanceof Array){let unique={};anime.studios.edges=anime.studios.edges.filter(studio=>{let _studio=studio?.node?.name;if(_studio&&!unique[_studio]){unique[_studio]=true;return true}else{return false}})}if(excludedEntries?.hasOwnProperty?.(currentId)){delete excludedEntries[currentId];shouldUpdateExcludedEntries=true}if(isJsonObject(animeEntries?.[currentId])){continue}else if(animeFormats[loweredFormat]){++newAddedEntriesCount}anime.dateAdded=currentRequestTimestamp;highestIncludedEntryID=Math.max(highestIncludedEntryID,currentId);animeEntries[currentId]=anime;shouldUpdateAnimeEntries=true}else{if(animeEntries?.hasOwnProperty?.(currentId)){delete animeEntries[currentId];shouldUpdateAnimeEntries=true}highestExcludedEntryID=Math.max(highestExcludedEntryID,currentId);excludedEntries[currentId]=1;shouldUpdateExcludedEntries=true}}}}if(!foundLastHighestID&&newLowestID>lastHighestID){if(!isShowingProgress){isShowingProgress=true;isShowingProgressTimeout=setTimeout(()=>{if(percentage>=.01){percentage=Math.min(percentage,99.99);self.postMessage({status:`${percentage.toFixed(2)}% Adding New Entries`})}isShowingProgress=false},17)}let hasNextPage=Page?.pageInfo?.hasNextPage??true;if(headers?.get("x-ratelimit-remaining")>0){if(hasNextPage&&media.length>0){return recallGNE(++page)}else{return recallGNE(page)}}else{if(onlyGetNewEntries){self.postMessage({errorDuringInit:true})}let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});if(hasNextPage&&media.length>0){return recallGNE(++page)}else{return recallGNE(page)}},6e4)}}else{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(shouldUpdateAnimeEntries){self.postMessage({status:"100% Adding New Entries"})}isShowingProgress=false;if(foundLastHighestID){if(highestIncludedEntryID<=highestExcludedEntryID){if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");self.postMessage({updateRecommendationList:true});shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}}else{if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");self.postMessage({updateRecommendationList:true});shouldUpdateAnimeEntries=false}}if(newAddedEntriesCount>lastAddedEntriesCount){self.postMessage({notifyAddedEntries:newAddedEntriesCount,notifyEditedEntries:newEditedEntriesCount});lastAddedEntriesCount=newAddedEntriesCount}}else{animeUpdateAt=await retrieveJSON("animeUpdateAt")||1706674120;animeEntries=await retrieveJSON("animeEntries");if(isJsonObject(animeEntries)){if(jsonIsEmpty(animeEntries)){self.postMessage({getEntries:true});return}}else{self.postMessage({noEntriesFound:true});return}excludedEntries=await retrieveJSON("excludedEntries")||{};newAddedEntriesCount=0}self.postMessage({status:null});if(onlyGetNewEntries){self.postMessage({done:true})}else{updateAnimeEntries(animeEntries,excludedEntries,animeUpdateAt)}}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;if(headers?.get("x-ratelimit-remaining")>0){return recallGNE(page)}else{if(onlyGetNewEntries){self.postMessage({errorDuringInit:true})}let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallGNE(page)},6e4)}console.error(error)})}recallGNE(1)}async function updateAnimeEntries(animeEntries,excludedEntries,animeUpdateAt){const hasNewVersion=entriesVersion>(await retrieveJSON("entriesVersion")??0);const animeEntriesArray=Object.values(animeEntries);let pastAiringEpisodeIDs=animeEntriesArray.filter(({nextAiringEpisode,format})=>{if(isJsonObject(nextAiringEpisode)){const loweredFormat=format?.trim?.()?.toLowerCase?.();if(loweredFormat==="manga"||loweredFormat==="one_shot"||loweredFormat==="novel")return false;let releaseDate=new Date(nextAiringEpisode?.airingAt*1e3);if(releaseDate instanceof Date&&!isNaN(releaseDate)&&releaseDate<=(new Date).getTime()){return true}else{return false}}else{return false}}).map(({id})=>id);let nonUpdatedAnimeIDs=[];if(!hasNewVersion){nonUpdatedAnimeIDs=animeEntriesArray.filter(({updatedAt})=>{return!updatedAt||updatedAt<=animeUpdateAt}).sort((a,b)=>{let updatedAtA=a?.updatedAt,updatedAtB=b?.updatedAt;updatedAtA=typeof updatedAtA==="number"&&!isNaN(updatedAtA)&&updatedAtA!==Infinity?updatedAtA:-Infinity;updatedAtB=typeof updatedAtB==="number"&&!isNaN(updatedAtB)&&updatedAtB!==Infinity?updatedAtB:-Infinity;return updatedAtA-updatedAtB}).map(({id})=>id)}const animeLength=pastAiringEpisodeIDs.length;let currentNonProcessedLength=animeLength;const pastAiringEpisodeIDsCollection=divideArray(pastAiringEpisodeIDs,maxArraySize);const nonUpdatedAnimeIDsCollection=divideArray(nonUpdatedAnimeIDs,maxArraySize);let pastAiringEpisodeIDsCollectionIdx=0;let nonUpdatedAnimeIDsCollectionIdx=0;self.postMessage({status:"Checking Recent Entries"});let shouldUpdateAnimeEntries,shouldUpdateExcludedEntries;let nonUpdatedAnimePercentFinished=0,currentNonUpdatedAnimeCollectionMaxPercent=0;function recallUNAE(page,pastAiringEpisodeIDsString){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{Page(page:${page},perPage:${maxAnimePerPage}){pageInfo{hasNextPage}media(id_in:[${pastAiringEpisodeIDsString||""}],type:ANIME){id format genres status(version:2)nextAiringEpisode{episode airingAt}}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(async({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNAE(page,pastAiringEpisodeIDsString)},6e4)}else{let Page=result?.data?.Page;let media=Page?.media||[];if(media instanceof Array){for(let anime of media){const currentId=anime?.id;if(typeof currentId==="number"&&!isNaN(currentId)&&isFinite(currentId)){pastAiringEpisodeIDs=pastAiringEpisodeIDs.filter(_id=>_id!==currentId);if((typeof anime?.format!=="string"||!excludedFormats[anime?.format?.trim?.()?.toLowerCase?.()])&&!anime?.genres?.some?.(genre=>genre?.trim?.()?.toLowerCase?.()==="hentai")){if(excludedEntries?.hasOwnProperty?.(currentId)){delete excludedEntries[currentId];shouldUpdateExcludedEntries=true}let savedAnime=animeEntries?.[currentId];if(isJsonObject(savedAnime)){let isPossiblyFinished=typeof savedAnime?.nextAiringEpisode?.episode==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.episode)&&savedAnime?.nextAiringEpisode?.episode===savedAnime?.episodes&&typeof savedAnime?.nextAiringEpisode?.airingAt==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.airingAt)&&new Date(savedAnime?.nextAiringEpisode?.airingAt*1e3)<=new Date;let newStatusIsStillReleasing=anime?.status?.trim?.()?.toLowerCase?.()==="releasing"&&savedAnime?.status?.trim?.()?.toLowerCase?.()==="releasing";let newNextAiringEpisodeIsRemoved=!isJsonObject(anime?.nextAiringEpisode);let updateNextAiringEpisode=!(isPossiblyFinished&&newStatusIsStillReleasing&&newNextAiringEpisodeIsRemoved);if(updateNextAiringEpisode){animeEntries[currentId].nextAiringEpisode=anime?.nextAiringEpisode;shouldUpdateAnimeEntries=true}}}else{if(animeEntries?.hasOwnProperty?.(currentId)){delete animeEntries[currentId];shouldUpdateAnimeEntries=true}excludedEntries[currentId]=1;shouldUpdateExcludedEntries=true}}}}let hasNextPage=Page?.pageInfo?.hasNextPage??true;if(hasNextPage&&media.length>0){if(!minimizeTransaction){if(currentNonProcessedLength>pastAiringEpisodeIDs.length){currentNonProcessedLength=pastAiringEpisodeIDs.length;let processedLength=Math.max(animeLength-currentNonProcessedLength,0);let percentage=100*(processedLength/animeLength);percentage=Math.min(percentage,99.99);if(!isShowingProgress){isShowingProgress=true;isShowingProgressTimeout=setTimeout(()=>{self.postMessage({status:`${percentage.toFixed(2)}% Updating Recent Entries`});isShowingProgress=false},17)}}if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}}if(headers?.get("x-ratelimit-remaining")>0){return recallUNAE(++page,pastAiringEpisodeIDsString)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNAE(++page,pastAiringEpisodeIDsString)},6e4)}}else if(pastAiringEpisodeIDsCollection.length-1>pastAiringEpisodeIDsCollectionIdx){++pastAiringEpisodeIDsCollectionIdx;recallUNAE(1,pastAiringEpisodeIDsCollection[pastAiringEpisodeIDsCollectionIdx].join(","))}else{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");self.postMessage({updateRecommendationList:true});shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}if(hasNewVersion){updateAllEntries(animeEntries,excludedEntries,animeUpdateAt)}else if(nonUpdatedAnimeIDsCollection.length>0){nonUpdatedAnimePercentFinished=nonUpdatedAnimeIDsCollection.reduce((accRatio,arr,idx)=>{let ratio=arr.length/nonUpdatedAnimeIDs.length;if(idx<nonUpdatedAnimeIDsCollectionIdx){accRatio+=ratio}else if(idx===nonUpdatedAnimeIDsCollectionIdx){currentNonUpdatedAnimeCollectionMaxPercent=ratio*100}return accRatio},0)*100;recallUNUA(1,nonUpdatedAnimeIDsCollection[nonUpdatedAnimeIDsCollectionIdx].join(","))}else{self.postMessage({status:"100% Updating Recent Entries"});self.postMessage({status:null});self.postMessage({done:true})}}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;if(headers?.get("x-ratelimit-remaining")>0){return recallUNAE(page,pastAiringEpisodeIDsString)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNAE(page,pastAiringEpisodeIDsString)},6e4)}console.error(error)})}let currentRecursingOldestUpdateAt,currentNewestUpdateAt,newestUpdateAt,currentLargestDif,percentage=0;function recallUNUA(page,nonUpdatedAnimeIDsString){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{Page(page:${page},perPage:${maxAnimePerPage}){pageInfo{hasNextPage}media(id_in:[${nonUpdatedAnimeIDsString||""}],sort:UPDATED_AT_DESC){id updatedAt title{romaji english native}relations{edges{relationType(version:2)node{id popularity}}}description siteUrl averageScore episodes chapters volumes countryOfOrigin duration trending popularity favourites format genres status(version:2)coverImage{large}trailer{id thumbnail site}bannerImage tags{name rank category}studios{edges{node{name siteUrl isAnimationStudio}isMain}}startDate{month day year}endDate{month day year}seasonYear season staff(perPage:${maxStaffPerPage},page:1,sort:RELEVANCE){edges{node{name{userPreferred}siteUrl}role}}nextAiringEpisode{episode airingAt}}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(async({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNUA(page,nonUpdatedAnimeIDsString)},6e4)}else{let Page=result?.data?.Page;let media=Page?.media||[];let currentUpdateAt;if(media instanceof Array){for(let anime of media){const currentId=anime?.id;if(typeof currentId==="number"&&!isNaN(currentId)&&isFinite(currentId)){currentUpdateAt=anime?.updatedAt;if(currentUpdateAt&&typeof currentUpdateAt==="number"&&!isNaN(currentUpdateAt)&&isFinite(currentUpdateAt)){if(currentUpdateAt>currentNewestUpdateAt||currentNewestUpdateAt==null){newestUpdateAt=currentNewestUpdateAt=currentUpdateAt;if(currentLargestDif==null){currentLargestDif=currentNewestUpdateAt-animeUpdateAt}else{currentLargestDif=Math.max(currentLargestDif,currentNewestUpdateAt-animeUpdateAt)}}if(currentUpdateAt<currentRecursingOldestUpdateAt||currentRecursingOldestUpdateAt==null){currentRecursingOldestUpdateAt=currentUpdateAt;if(animeUpdateAt>currentRecursingOldestUpdateAt&&currentRecursingOldestUpdateAt&&animeUpdateAt){break}else if(currentNewestUpdateAt&&animeUpdateAt<=currentRecursingOldestUpdateAt&&currentNewestUpdateAt>currentRecursingOldestUpdateAt){percentage=(currentLargestDif-(currentRecursingOldestUpdateAt-animeUpdateAt))/currentLargestDif*currentNonUpdatedAnimeCollectionMaxPercent+nonUpdatedAnimePercentFinished}}}const loweredFormat=anime?.format?.trim?.()?.toLowerCase?.();if((typeof anime?.format!=="string"||!excludedFormats[loweredFormat])&&!anime?.genres?.some?.(genre=>genre?.trim?.()?.toLowerCase?.()==="hentai")){if(anime?.genres instanceof Array){let unique={};anime.genres=anime.genres.filter(genre=>{if(genre&&!unique[genre]){unique[genre]=true;return true}else{return false}})}if(anime?.tags instanceof Array){let unique={};anime.tags=anime.tags.filter(tag=>{let _tag=tag?.name;if(_tag&&!unique[_tag]){unique[_tag]=true;return true}else{return false}})}if(anime?.studios?.edges instanceof Array){let unique={};anime.studios.edges=anime.studios.edges.filter(studio=>{let _studio=studio?.node?.name;if(_studio&&!unique[_studio]){unique[_studio]=true;return true}else{return false}})}if(excludedEntries?.hasOwnProperty?.(currentId)){delete excludedEntries[currentId];shouldUpdateExcludedEntries=true}let savedAnime=animeEntries?.[currentId];if(isJsonObject(savedAnime)){anime.dateAdded=savedAnime?.dateAdded;let isEditedEntry=false;let newCoverImage=anime?.coverImage?.large;if(newCoverImage){let oldCoverImage=savedAnime?.coverImage?.large;if(newCoverImage!==oldCoverImage){isEditedEntry=true}}if(!isEditedEntry){let newTrailerId=anime?.trailer?.id;if(newTrailerId){let oldTrailerId=savedAnime?.trailer?.id;if(newTrailerId!==oldTrailerId){isEditedEntry=true}}}const loweredStatus=anime?.status?.trim?.()?.toLowerCase?.();if(isEditedEntry&&loweredStatus!=="finished"){if(animeFormats[loweredFormat]){++newEditedEntriesCount}anime.dateEdited=currentRequestTimestamp}else if(savedAnime?.dateEdited){anime.dateEdited=savedAnime?.dateEdited}let isPossiblyFinished=typeof savedAnime?.nextAiringEpisode?.episode==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.episode)&&savedAnime?.nextAiringEpisode?.episode===savedAnime?.episodes&&typeof savedAnime?.nextAiringEpisode?.airingAt==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.airingAt)&&new Date(savedAnime?.nextAiringEpisode?.airingAt*1e3)<=new Date;let newStatusIsStillReleasing=loweredStatus==="releasing"&&savedAnime?.status?.trim?.()?.toLowerCase?.()==="releasing";let newNextAiringEpisodeIsRemoved=!isJsonObject(anime?.nextAiringEpisode);let dontUpdateNextAiringEpisode=isPossiblyFinished&&newStatusIsStillReleasing&&newNextAiringEpisodeIsRemoved;if(dontUpdateNextAiringEpisode){anime.nextAiringEpisode=savedAnime.nextAiringEpisode}}animeEntries[currentId]=anime;shouldUpdateAnimeEntries=true}else{if(animeEntries?.hasOwnProperty?.(currentId)){delete animeEntries[currentId];shouldUpdateAnimeEntries=true}excludedEntries[currentId]=1;shouldUpdateExcludedEntries=true}}}}let hasNextPage=Page?.pageInfo?.hasNextPage??true;if(hasNextPage&&media.length>0&&(currentUpdateAt>=animeUpdateAt||!currentUpdateAt||!animeUpdateAt)){if(!minimizeTransaction){if(!isShowingProgress){isShowingProgress=true;isShowingProgressTimeout=setTimeout(()=>{if(percentage>=.01){percentage=Math.min(percentage,99.99);self.postMessage({status:`${percentage.toFixed(2)}% Updating Entries`})}else{self.postMessage({status:"Updating Entries"})}isShowingProgress=false},17)}if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}}if(headers?.get("x-ratelimit-remaining")>0){return recallUNUA(++page,nonUpdatedAnimeIDsString)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNUA(++page,nonUpdatedAnimeIDsString)},6e4)}}else if(nonUpdatedAnimeIDsCollection.length-1>nonUpdatedAnimeIDsCollectionIdx){currentNewestUpdateAt=currentRecursingOldestUpdateAt=currentLargestDif=null;++nonUpdatedAnimeIDsCollectionIdx;nonUpdatedAnimePercentFinished=nonUpdatedAnimeIDsCollection.reduce((accRatio,arr,idx)=>{let ratio=arr.length/nonUpdatedAnimeIDs.length;if(idx<nonUpdatedAnimeIDsCollectionIdx){accRatio+=ratio}else if(idx===nonUpdatedAnimeIDsCollectionIdx){currentNonUpdatedAnimeCollectionMaxPercent=ratio*100}return accRatio},0)*100;return recallUNUA(1,nonUpdatedAnimeIDsCollection[nonUpdatedAnimeIDsCollectionIdx].join(","))}else{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");self.postMessage({updateRecommendationList:true});shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}if(newestUpdateAt&&newestUpdateAt>animeUpdateAt){await saveJSON(newestUpdateAt,"animeUpdateAt");animeUpdateAt=newestUpdateAt}if(newAddedEntriesCount>lastAddedEntriesCount||newEditedEntriesCount>lastEditedEntriesCount){self.postMessage({notifyAddedEntries:newAddedEntriesCount,notifyEditedEntries:newEditedEntriesCount});lastAddedEntriesCount=newAddedEntriesCount;lastEditedEntriesCount=newEditedEntriesCount}self.postMessage({status:"100% Updating Entries"});let runnedAutoUpdateAt=(new Date).getTime();await saveJSON(runnedAutoUpdateAt,"runnedAutoUpdateAt");self.postMessage({status:null});self.postMessage({done:true})}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;if(headers?.get("x-ratelimit-remaining")>0){return recallUNUA(page,nonUpdatedAnimeIDsString)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNUA(page,nonUpdatedAnimeIDsString)},6e4)}console.error(error)})}if(pastAiringEpisodeIDsCollection.length>0){recallUNAE(1,pastAiringEpisodeIDsCollection[pastAiringEpisodeIDsCollectionIdx].join(","))}else{if(hasNewVersion){updateAllEntries(animeEntries,excludedEntries,animeUpdateAt)}else if(nonUpdatedAnimeIDsCollection.length>0){recallUNUA(1,nonUpdatedAnimeIDsCollection[nonUpdatedAnimeIDsCollectionIdx].join(","))}else{self.postMessage({status:null});self.postMessage({done:true})}}}async function updateAllEntries(animeEntries,excludedEntries,animeUpdateAt){let oldestAnimeUpdateAt;let recursingOldestUpdateAt,newestUpdateAt,largestDif;self.postMessage({status:"Checking Entries"});function recallGOUD(currentPage){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{Page(page:1,perPage:1){media(sort:UPDATED_AT){updatedAt}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(async({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallGOUD(currentPage)},6e4)}else{oldestAnimeUpdateAt=result?.data?.Page?.media?.[0]?.updatedAt||oldestAnimeUpdateAt;if(oldestAnimeUpdateAt||currentPage){return recallUNRE(currentPage||1)}else{self.postMessage({status:null});self.postMessage({done:true})}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;if(headers?.get("x-ratelimit-remaining")>0){return recallGOUD(currentPage)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallGOUD(currentPage)},6e4)}console.error(error)})}let hasFoundLessOrEqualToOldestUpdateAt=false;let shouldUpdateAnimeEntries,shouldUpdateExcludedEntries;let percentage=0;function recallUNRE(page){fetch("https://graphql.anilist.co",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Cache-Control":"max-age=31536000, immutable"},body:JSON.stringify({query:`{Page(page:${page},perPage:${maxAnimePerPage}){pageInfo{hasNextPage}media(sort:UPDATED_AT_DESC){id updatedAt title{romaji english native}relations{edges{relationType(version:2)node{id popularity}}}description siteUrl averageScore episodes chapters volumes countryOfOrigin duration trending popularity favourites format genres status(version:2)coverImage{large}trailer{id thumbnail site}bannerImage tags{name rank category}studios{edges{node{name siteUrl isAnimationStudio}isMain}}startDate{month day year}endDate{month day year}seasonYear season staff(perPage:${maxStaffPerPage},page:1,sort:RELEVANCE){edges{node{name{userPreferred}siteUrl}role}}nextAiringEpisode{episode airingAt}}}}`})}).then(async response=>{let headers=response.headers;let result=await response.json();return{result:result,headers:headers}}).then(async({result,headers})=>{let error;if(typeof(error=result?.errors?.[0]?.message)==="string"){let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNRE(page)},6e4)}else{let Page=result?.data?.Page;let media=Page?.media||[];let currentUpdateAt;if(media instanceof Array){for(let anime of media){const currentId=anime?.id;if(typeof currentId==="number"&&!isNaN(currentId)&&isFinite(currentId)){currentUpdateAt=anime?.updatedAt;if(currentUpdateAt&&typeof currentUpdateAt==="number"&&!isNaN(currentUpdateAt)&&isFinite(currentUpdateAt)){hasFoundLessOrEqualToOldestUpdateAt=hasFoundLessOrEqualToOldestUpdateAt||currentUpdateAt<=oldestAnimeUpdateAt;if(currentUpdateAt>newestUpdateAt||newestUpdateAt==null){newestUpdateAt=currentUpdateAt;if(largestDif==null){largestDif=newestUpdateAt-oldestAnimeUpdateAt}else{largestDif=Math.max(largestDif,newestUpdateAt-oldestAnimeUpdateAt)}}if(currentUpdateAt<recursingOldestUpdateAt||recursingOldestUpdateAt==null){recursingOldestUpdateAt=currentUpdateAt;if(oldestAnimeUpdateAt<=recursingOldestUpdateAt&&newestUpdateAt>recursingOldestUpdateAt&&newestUpdateAt){percentage=(largestDif-(recursingOldestUpdateAt-oldestAnimeUpdateAt))/largestDif*100}}}const loweredFormat=anime?.format?.trim?.()?.toLowerCase?.();if((typeof anime?.format!=="string"||!excludedFormats[loweredFormat])&&!anime?.genres?.some?.(genre=>genre?.trim?.()?.toLowerCase?.()==="hentai")){if(anime?.genres instanceof Array){let unique={};anime.genres=anime.genres.filter(genre=>{if(genre&&!unique[genre]){unique[genre]=true;return true}else{return false}})}if(anime?.tags instanceof Array){let unique={};anime.tags=anime.tags.filter(tag=>{let _tag=tag?.name;if(_tag&&!unique[_tag]){unique[_tag]=true;return true}else{return false}})}if(anime?.studios?.edges instanceof Array){let unique={};anime.studios.edges=anime.studios.edges.filter(studio=>{let _studio=studio?.node?.name;if(_studio&&!unique[_studio]){unique[_studio]=true;return true}else{return false}})}if(excludedEntries?.hasOwnProperty?.(currentId)){delete excludedEntries[currentId];shouldUpdateExcludedEntries=true}let savedAnime=animeEntries?.[currentId];if(isJsonObject(savedAnime)){anime.dateAdded=savedAnime?.dateAdded;let isEditedEntry=false;let newCoverImage=anime?.coverImage?.large;if(newCoverImage){let oldCoverImage=savedAnime?.coverImage?.large;if(newCoverImage!==oldCoverImage){isEditedEntry=true}}if(!isEditedEntry){let newTrailerId=anime?.trailer?.id;if(newTrailerId){let oldTrailerId=savedAnime?.trailer?.id;if(newTrailerId!==oldTrailerId){isEditedEntry=true}}}const loweredStatus=anime?.status?.trim?.()?.toLowerCase?.();if(isEditedEntry&&loweredStatus!=="finished"){if(animeFormats[loweredFormat]){++newEditedEntriesCount}anime.dateEdited=currentRequestTimestamp}else if(savedAnime?.dateEdited){anime.dateEdited=savedAnime?.dateEdited}let isPossiblyFinished=typeof savedAnime?.nextAiringEpisode?.episode==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.episode)&&savedAnime?.nextAiringEpisode?.episode===savedAnime?.episodes&&typeof savedAnime?.nextAiringEpisode?.airingAt==="number"&&!isNaN(savedAnime?.nextAiringEpisode?.airingAt)&&new Date(savedAnime?.nextAiringEpisode?.airingAt*1e3)<=new Date;let newStatusIsStillReleasing=loweredStatus==="releasing"&&savedAnime?.status?.trim?.()?.toLowerCase?.()==="releasing";let newNextAiringEpisodeIsRemoved=!isJsonObject(anime?.nextAiringEpisode);let dontUpdateNextAiringEpisode=isPossiblyFinished&&newStatusIsStillReleasing&&newNextAiringEpisodeIsRemoved;if(dontUpdateNextAiringEpisode){anime.nextAiringEpisode=savedAnime.nextAiringEpisode}}animeEntries[currentId]=anime;shouldUpdateAnimeEntries=true}else{if(animeEntries?.hasOwnProperty?.(currentId)){delete animeEntries[currentId];shouldUpdateAnimeEntries=true}excludedEntries[currentId]=1;shouldUpdateExcludedEntries=true}}}}if(!hasFoundLessOrEqualToOldestUpdateAt){if(!minimizeTransaction){if(!isShowingProgress){isShowingProgress=true;isShowingProgressTimeout=setTimeout(()=>{if(percentage>=.01){percentage=Math.min(percentage,99.99);self.postMessage({status:`${percentage.toFixed(2)}% Updating Entries`})}else{self.postMessage({status:"Updating Entries"})}isShowingProgress=false},17)}if(shouldUpdateAnimeEntries){await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}}let hasNextPage=Page?.pageInfo?.hasNextPage??true;if(headers?.get("x-ratelimit-remaining")>0){if(hasNextPage&&media.length>0){return recallUNRE(++page)}else{return recallGOUD(page)}}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:(error?error+" ":"")+`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});if(hasNextPage&&media.length>0){return recallUNRE(++page)}else{return recallGOUD(page)}},6e4)}}else{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(shouldUpdateAnimeEntries){self.postMessage({status:"100% Updating Entries"});await saveJSON(true,"shouldProcessRecommendation");await saveJSON(animeEntries,"animeEntries");self.postMessage({updateRecommendationList:true});shouldUpdateAnimeEntries=false}if(shouldUpdateExcludedEntries){await saveJSON(excludedEntries,"excludedEntries");shouldUpdateExcludedEntries=false}await saveJSON(entriesVersion,"entriesVersion");if(newestUpdateAt&&newestUpdateAt>animeUpdateAt){await saveJSON(newestUpdateAt,"animeUpdateAt");animeUpdateAt=newestUpdateAt}if(newAddedEntriesCount>lastAddedEntriesCount||newEditedEntriesCount>lastEditedEntriesCount){self.postMessage({notifyAddedEntries:newAddedEntriesCount,notifyEditedEntries:newEditedEntriesCount});lastAddedEntriesCount=newAddedEntriesCount;lastEditedEntriesCount=newEditedEntriesCount}self.postMessage({status:null});self.postMessage({done:true})}}}).catch(async error=>{clearTimeout(isShowingProgressTimeout);isShowingProgress=false;if(!await isConnected()){self.postMessage({status:"Server unreachable"});self.postMessage({error:"Server unreachable"});return}let headers=error.headers;if(headers?.get("x-ratelimit-remaining")>0){return recallUNRE(page)}else{let secondsPassed=60;let rateLimitInterval=setInterval(()=>{self.postMessage({status:`Rate Limit: ${msToTime(secondsPassed*1e3)}`});--secondsPassed},1e3);setTimeout(()=>{clearInterval(rateLimitInterval);self.postMessage({status:"Retrying"});return recallUNRE(page)},6e4)}console.error(error)})}recallGOUD()}};async function IDBinit(){return await new Promise(resolve=>{let request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onerror=error=>{console.error(error)};request.onsuccess=event=>{db=event.target.result;return resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("MyObjectStore");let transaction=event.target.transaction;transaction.oncomplete=()=>{return resolve()}}})}async function saveJSON(data,name){return await new Promise(async(resolve,reject)=>{try{let write=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").openCursor();write.onsuccess=async event=>{let put=await db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").put(data,name);put.onsuccess=()=>{return resolve()};put.onerror=()=>{return resolve()}};write.onerror=async error=>{console.error(error);return reject()}}catch(ex){console.error(ex)}})}async function retrieveJSON(name){return await new Promise(resolve=>{try{let read=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").get(name);read.onsuccess=()=>{return resolve(read.result)};read.onerror=error=>{console.error(error);return resolve()}}catch(ex){console.error(ex);return resolve()}})}function getMax(arr){let len=arr.length;let max=-Infinity;while(len--){max=arr[len]>max?arr[len]:max}return max}function divideArray(array,size,sameSize){let result=[];for(let i=0;i<array.length;i+=size){result.push(array.slice(sameSize?Math.min(i,array.length-size):i,i+size))}return result}function msToTime(duration,limit){try{if(duration<1e3){return"0s"}let seconds=Math.floor(duration/1e3%60),minutes=Math.floor(duration/6e4%60),hours=Math.floor(duration/36e5%24),days=Math.floor(duration/864e5%7),weeks=Math.floor(duration/6048e5%4),months=Math.floor(duration/24192e5%12),years=Math.floor(duration/290304e5%10),decades=Math.floor(duration/290304e6%10),century=Math.floor(duration/290304e7%10),millenium=Math.floor(duration/290304e8%10);let time=[];if(millenium>0)time.push(`${millenium}mil`);if(century>0)time.push(`${century}cen`);if(decades>0)time.push(`${decades}dec`);if(years>0)time.push(`${years}y`);if(months>0)time.push(`${months}mon`);if(weeks>0)time.push(`${weeks}w`);if(days>0)time.push(`${days}d`);if(hours>0)time.push(`${hours}h`);if(minutes>0)time.push(`${minutes}m`);if(seconds>0)time.push(`${seconds}s`);if(limit>0){time=time.slice(0,limit)}return time.join(" ")||"0s"}catch(e){return""}}function isJsonObject(obj){return Object.prototype.toString.call(obj)==="[object Object]"}function jsonIsEmpty(obj){for(const key in obj){return false}return true}function ncsCompare(str1,str2){if(typeof str1!=="string"||typeof str2!=="string"){return false}return str1.toLowerCase()===str2.toLowerCase()}let isConnectedPromise;async function isConnected(){if(isConnectedPromise)return isConnectedPromise;isConnectedPromise=new Promise(async resolve=>{try{if(navigator?.onLine!==false){if(typeof windowHREF!=="string"||windowHREF===""){return resolve(true)}let response=await fetch(windowHREF,{method:"HEAD",cache:"no-store"});isConnectedPromise=null;resolve(response?.ok)}isConnectedPromise=null;resolve(false)}catch(error){isConnectedPromise=null;resolve(false)}});return isConnectedPromise}